{
  "py/object": "models.WorkBook.WorkBook",
  "data_sources": {
    "federated.06kco84062piu819yxlb00lxfmwo": {
      "py/object": "models.DataSource.DataSource",
      "caption": "price_realization_detail",
      "name": "federated.06kco84062piu819yxlb00lxfmwo"
    },
    "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
      "py/object": "models.DataSource.DataSource",
      "caption": "vw_summary_result (esd_dm.vw_summary_result)",
      "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
    },
    "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
      "py/object": "models.DataSource.DataSource",
      "caption": "stg_churn_parent",
      "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
    },
    "federated.1pb2as311sw84e13u5qz60192nfm": {
      "py/object": "models.DataSource.DataSource",
      "caption": "stg_churn_parent_product",
      "name": "federated.1pb2as311sw84e13u5qz60192nfm"
    },
    "federated.1dqrfmf0a371j310dfdf0134utz5": {
      "py/object": "models.DataSource.DataSource",
      "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
      "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
    },
    "federated.1lr7nfm1rx5vi112qzxe31k02o27": {
      "py/object": "models.DataSource.DataSource",
      "caption": "pr_churn_product",
      "name": "federated.1lr7nfm1rx5vi112qzxe31k02o27"
    }
  },
  "actions": {
    "[Action4]": {
      "py/object": "models.Action.Action",
      "caption": "Filter 1 (generated)",
      "name": "[Action4]"
    }
  },
  "dashboards": {
    "Churn DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Churn DB"
    },
    "Customer Churn Detail": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Customer Churn Detail"
    },
    "Customer Churn Map": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Customer Churn Map"
    },
    "Customer Effort DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Customer Effort DB"
    },
    "Enterprise Success Dashboard LIVE": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Enterprise Success Dashboard LIVE"
    },
    "Formulus DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Formulus DB"
    },
    "Headcount Plan DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Headcount Plan DB"
    },
    "Inquiries DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Inquiries DB"
    },
    "LION Program DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "LION Program DB"
    },
    "Marketing DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Marketing DB"
    },
    "Net Contribution DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Net Contribution DB"
    },
    "New Business ACV DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "New Business ACV DB"
    },
    "Not in Use Currently": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Not in Use Currently"
    },
    "Patent Office Workflow DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Patent Office Workflow DB"
    },
    "Price Realization DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Price Realization DB"
    },
    "Price Realization DB (2)": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Price Realization DB (2)"
    },
    "Price Realization Detail": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Price Realization Detail"
    },
    "Price Realization Detail (2)": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Price Realization Detail (2)"
    },
    "Product Churn Detail": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Product Churn Detail"
    },
    "Revenue Forecast DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Revenue Forecast DB"
    },
    "Roadmap Delivery DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Roadmap Delivery DB"
    },
    "STNext Migration DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "STNext Migration DB"
    },
    "SciFinder DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "SciFinder DB"
    },
    "Services Revenue DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Services Revenue DB"
    },
    "Strategic Alliance Deal Progression DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "Strategic Alliance Deal Progression DB"
    },
    "cNPS DB ": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "cNPS DB "
    },
    "eNPS DB": {
      "py/object": "models.Dashboard.Dashboard",
      "name": "eNPS DB"
    }
  },
  "worksheets": {
    "Brand Elevation Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Brand Elevation Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S004\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CAS Services Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CAS Services Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S002\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CCD 1-4 CustAge Graph (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CCD 1-4 CustAge Graph (2)",
      "data_sources": {
        "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent",
          "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_992199303961165824]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*dd-mmm-yy",
          "name": "[Calculation_992199303997005825]",
          "role": "dimension",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "makedate(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "customer_age revised": {
          "py/object": "models.Column.Column",
          "caption": "customer_age revised",
          "datatype": "string",
          "name": "[Calculation_992199304001728514]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "REPLACE(ifnull([customer_age],'N/A'),'PRIOR CALENDAR YEARS','')"
          }
        },
        "Reporting Month  ": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month  ",
          "datatype": "string",
          "name": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[Calculation_992199303997005825]),3) + ' '+datename('year',[Calculation_992199303997005825])"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718699769856]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal"
        },
        "total_churn_usde (copy)": {
          "py/object": "models.Column.Column",
          "caption": "total_churn_usde (copy)",
          "datatype": "real",
          "default_format": "c\"$\"#,##0;(\"$\"#,##0)",
          "name": "[total_churn_usde (copy)_992199304337977350]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[total_churn_usde]"
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_992199303997005825]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303997005825]",
          "derivation": "MY",
          "name": "[my:Calculation_992199303997005825:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_992199304001728514]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199304001728514]",
          "derivation": "None",
          "name": "[none:Calculation_992199304001728514:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month - MonYr (copy)_950259537446551553]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "derivation": "None",
          "name": "[none:Reporting Month - MonYr (copy)_950259537446551553:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718699769856]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718699769856]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718699769856:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size]",
          "derivation": "None",
          "name": "[none:customer_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde (copy)_992199304337977350]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde (copy)_992199304337977350]",
          "derivation": "None",
          "name": "[none:total_churn_usde (copy)_992199304337977350:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_992199303961165824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303961165824]",
          "derivation": "User",
          "name": "[usr:Calculation_992199303961165824:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[my:Calculation_992199303997005825:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_992199303997005825:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size (copy)_1150669718699769856:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718699769856:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:total_churn_usde (copy)_992199304337977350:qk]",
          "group_filters": []
        }
      ]
    },
    "CCD 5 CustAge Graph (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CCD 5 CustAge Graph (2)",
      "data_sources": {
        "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent",
          "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_992199303961165824]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*dd-mmm-yy",
          "name": "[Calculation_992199303997005825]",
          "role": "dimension",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "makedate(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "customer_age revised": {
          "py/object": "models.Column.Column",
          "caption": "customer_age revised",
          "datatype": "string",
          "name": "[Calculation_992199304001728514]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "REPLACE(ifnull([customer_age],'N/A'),'PRIOR CALENDAR YEARS','')"
          }
        },
        "Reporting Month  ": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month  ",
          "datatype": "string",
          "name": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[Calculation_992199303997005825]),3) + ' '+datename('year',[Calculation_992199303997005825])"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Cancellation Reason": {
          "py/object": "models.Column.Column",
          "caption": "Cancellation Reason",
          "datatype": "string",
          "name": "[cancellation_reason_description]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718699769856]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Last Product": {
          "py/object": "models.Column.Column",
          "caption": "Last Product",
          "datatype": "string",
          "name": "[parent_last_product]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal"
        },
        "total_churn_usde (copy)": {
          "py/object": "models.Column.Column",
          "caption": "total_churn_usde (copy)",
          "datatype": "real",
          "default_format": "c\"$\"#,##0;(\"$\"#,##0)",
          "name": "[total_churn_usde (copy)_992199304337977350]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[total_churn_usde]"
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_992199303997005825]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303997005825]",
          "derivation": "MY",
          "name": "[my:Calculation_992199303997005825:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_992199304001728514]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199304001728514]",
          "derivation": "None",
          "name": "[none:Calculation_992199304001728514:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month - MonYr (copy)_950259537446551553]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "derivation": "None",
          "name": "[none:Reporting Month - MonYr (copy)_950259537446551553:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[cancellation_reason_description]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[cancellation_reason_description]",
          "derivation": "None",
          "name": "[none:cancellation_reason_description:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718699769856]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718699769856]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718699769856:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size]",
          "derivation": "None",
          "name": "[none:customer_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_last_product]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_last_product]",
          "derivation": "None",
          "name": "[none:parent_last_product:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde (copy)_992199304337977350]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde (copy)_992199304337977350]",
          "derivation": "None",
          "name": "[none:total_churn_usde (copy)_992199304337977350:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_992199303961165824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303961165824]",
          "derivation": "User",
          "name": "[usr:Calculation_992199303961165824:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[my:Calculation_992199303997005825:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_992199303997005825:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:cancellation_reason_description:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:cancellation_reason_description:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:customer_age:nk]",
              "member": "\"5 PRIOR CALENDAR YEARS OR MORE\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size (copy)_1150669718699769856:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718699769856:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_last_product:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_last_product:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:total_churn_usde (copy)_992199304337977350:qk]",
          "group_filters": []
        }
      ]
    },
    "CCD Map": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CCD Map",
      "data_sources": {
        "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent",
          "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_992199303961165824]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*dd-mmm-yy",
          "name": "[Calculation_992199303997005825]",
          "role": "dimension",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "makedate(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_992199303997005825]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303997005825]",
          "derivation": "MY",
          "name": "[my:Calculation_992199303997005825:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_992199303961165824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303961165824]",
          "derivation": "User",
          "name": "[usr:Calculation_992199303961165824:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[my:Calculation_992199303997005825:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_992199303997005825:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CCD Market Graph (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CCD Market Graph (2)",
      "data_sources": {
        "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent",
          "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_992199303961165824]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*dd-mmm-yy",
          "name": "[Calculation_992199303997005825]",
          "role": "dimension",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "makedate(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "Reporting Month  ": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month  ",
          "datatype": "string",
          "name": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[Calculation_992199303997005825]),3) + ' '+datename('year',[Calculation_992199303997005825])"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718699769856]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal"
        },
        "total_churn_usde (copy)": {
          "py/object": "models.Column.Column",
          "caption": "total_churn_usde (copy)",
          "datatype": "real",
          "default_format": "c\"$\"#,##0;(\"$\"#,##0)",
          "name": "[total_churn_usde (copy)_992199304337977350]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[total_churn_usde]"
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_992199303997005825]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303997005825]",
          "derivation": "MY",
          "name": "[my:Calculation_992199303997005825:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Reporting Month - MonYr (copy)_950259537446551553]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "derivation": "None",
          "name": "[none:Reporting Month - MonYr (copy)_950259537446551553:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718699769856]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718699769856]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718699769856:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde (copy)_992199304337977350]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde (copy)_992199304337977350]",
          "derivation": "None",
          "name": "[none:total_churn_usde (copy)_992199304337977350:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_992199303961165824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303961165824]",
          "derivation": "User",
          "name": "[usr:Calculation_992199303961165824:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[my:Calculation_992199303997005825:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_992199303997005825:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size (copy)_1150669718699769856:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718699769856:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:total_churn_usde (copy)_992199304337977350:qk]",
          "group_filters": []
        }
      ]
    },
    "CCD Table": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CCD Table",
      "data_sources": {
        "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent",
          "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_992199303961165824]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*dd-mmm-yy",
          "name": "[Calculation_992199303997005825]",
          "role": "dimension",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "makedate(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "Contract Type (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type (copy)",
          "datatype": "string",
          "name": "[Contract Type (copy)_1101411598477897732]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [temporary_contract_flag] when 'N' then 'Lost Revenue' else 'Contract Expired (In Negotiation)' end"
          }
        },
        "Reporting Month  ": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month  ",
          "datatype": "string",
          "name": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[Calculation_992199303997005825]),3) + ' '+datename('year',[Calculation_992199303997005825])"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Cancellation Reason": {
          "py/object": "models.Column.Column",
          "caption": "Cancellation Reason",
          "datatype": "string",
          "name": "[cancellation_reason_description]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718699769856]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Last Product": {
          "py/object": "models.Column.Column",
          "caption": "Last Product",
          "datatype": "string",
          "name": "[parent_last_product]",
          "role": "dimension",
          "type": "nominal"
        },
        "Parent": {
          "py/object": "models.Column.Column",
          "caption": "Parent",
          "datatype": "string",
          "name": "[parent_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal"
        },
        "total_churn_usde (copy)": {
          "py/object": "models.Column.Column",
          "caption": "total_churn_usde (copy)",
          "datatype": "real",
          "default_format": "c\"$\"#,##0;(\"$\"#,##0)",
          "name": "[total_churn_usde (copy)_992199304337977350]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[total_churn_usde]"
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_992199303997005825]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303997005825]",
          "derivation": "MY",
          "name": "[my:Calculation_992199303997005825:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Contract Type (copy)_1101411598477897732]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Contract Type (copy)_1101411598477897732]",
          "derivation": "None",
          "name": "[none:Contract Type (copy)_1101411598477897732:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month - MonYr (copy)_950259537446551553]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "derivation": "None",
          "name": "[none:Reporting Month - MonYr (copy)_950259537446551553:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[cancellation_reason_description]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[cancellation_reason_description]",
          "derivation": "None",
          "name": "[none:cancellation_reason_description:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718699769856]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718699769856]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718699769856:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size]",
          "derivation": "None",
          "name": "[none:customer_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_last_product]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_last_product]",
          "derivation": "None",
          "name": "[none:parent_last_product:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_name]",
          "derivation": "None",
          "name": "[none:parent_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde (copy)_992199304337977350]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde (copy)_992199304337977350]",
          "derivation": "None",
          "name": "[none:total_churn_usde (copy)_992199304337977350:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_992199303961165824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303961165824]",
          "derivation": "User",
          "name": "[usr:Calculation_992199303961165824:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[my:Calculation_992199303997005825:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_992199303997005825:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:Contract Type (copy)_1101411598477897732:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:Contract Type (copy)_1101411598477897732:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:cancellation_reason_description:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:cancellation_reason_description:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_age:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size (copy)_1150669718699769856:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718699769856:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:total_churn_usde (copy)_992199304337977350:qk]",
          "group_filters": []
        }
      ]
    },
    "CCD Tree Map": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CCD Tree Map",
      "data_sources": {
        "federated.0y5otnj0pnt8qr13n9oh50vo7muk": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent",
          "name": "federated.0y5otnj0pnt8qr13n9oh50vo7muk"
        }
      },
      "columns": {
        "conditional comma": {
          "py/object": "models.Column.Column",
          "caption": "conditional comma",
          "datatype": "string",
          "name": "[Calculation_274719589425307648]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF \r\nifnull(city,'')='' or ifnull(state,'')=''\r\nthen '' else ',' END"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*dd-mmm-yy",
          "name": "[Calculation_992199303997005825]",
          "role": "dimension",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "makedate(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "Cancellation Reason (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Cancellation Reason (copy)",
          "datatype": "string",
          "name": "[Cancellation Reason (copy)_1150669718727069699]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[cancellation_reason_description]"
          }
        },
        "Reporting Month  ": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month  ",
          "datatype": "string",
          "name": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[Calculation_992199303997005825]),3) + ' '+datename('year',[Calculation_992199303997005825])"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Cancellation Reason": {
          "py/object": "models.Column.Column",
          "caption": "Cancellation Reason",
          "datatype": "string",
          "name": "[cancellation_reason_description]",
          "role": "dimension",
          "type": "nominal"
        },
        "[city]": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "datatype": "string",
          "name": "[city]",
          "role": "dimension",
          "semantic_role": "[City].[Name]",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718699769856]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "Last Product": {
          "py/object": "models.Column.Column",
          "caption": "Last Product",
          "datatype": "string",
          "name": "[parent_last_product]",
          "role": "dimension",
          "type": "nominal"
        },
        "Parent": {
          "py/object": "models.Column.Column",
          "caption": "Parent",
          "datatype": "string",
          "name": "[parent_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "state (copy)": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "state (copy)",
          "datatype": "string",
          "name": "[state (copy)_1150669718727143428]",
          "role": "dimension",
          "semantic_role": "[State].[Name]",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[state]"
          }
        },
        "[state]": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "datatype": "string",
          "name": "[state]",
          "role": "dimension",
          "semantic_role": "[State].[Name]",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_274719589425307648]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_274719589425307648]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_274719589425307648:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month - MonYr (copy)_950259537446551553]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month - MonYr (copy)_950259537446551553]",
          "derivation": "Attribute",
          "name": "[attr:Reporting Month - MonYr (copy)_950259537446551553:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[cancellation_reason_description]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[cancellation_reason_description]",
          "derivation": "Attribute",
          "name": "[attr:cancellation_reason_description:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[city]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[city]",
          "derivation": "Attribute",
          "name": "[attr:city:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_last_product]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_last_product]",
          "derivation": "Attribute",
          "name": "[attr:parent_last_product:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[state]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[state]",
          "derivation": "Attribute",
          "name": "[attr:state:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_992199303997005825]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_992199303997005825]",
          "derivation": "MY",
          "name": "[my:Calculation_992199303997005825:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Cancellation Reason (copy)_1150669718727069699]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Cancellation Reason (copy)_1150669718727069699]",
          "derivation": "None",
          "name": "[none:Cancellation Reason (copy)_1150669718727069699:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718699769856]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718699769856]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718699769856:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_name]",
          "derivation": "None",
          "name": "[none:parent_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[state (copy)_1150669718727143428]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[state (copy)_1150669718727143428]",
          "derivation": "None",
          "name": "[none:state (copy)_1150669718727143428:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[Action (Country)]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[parent_country]",
              "member": "\"CHINA\"",
              "ui_domain": "database",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[Action (Country,Contract Type)]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "crossjoin",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[attr:cancellation_reason_description:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[attr:state:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[my:Calculation_992199303997005825:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_992199303997005825:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:Cancellation Reason (copy)_1150669718727069699:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:Cancellation Reason (copy)_1150669718727069699:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_age:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:customer_size (copy)_1150669718699769856:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718699769856:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.0y5otnj0pnt8qr13n9oh50vo7muk].[none:state (copy)_1150669718727143428:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:state (copy)_1150669718727143428:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CPD 1-4 CustAge Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CPD 1-4 CustAge Graph",
      "data_sources": {
        "federated.1pb2as311sw84e13u5qz60192nfm": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent_product",
          "name": "federated.1pb2as311sw84e13u5qz60192nfm"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_1195705709998415872]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "customer_age revised": {
          "py/object": "models.Column.Column",
          "caption": "customer_age revised",
          "datatype": "string",
          "name": "[Calculation_679199125983191045]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "REPLACE(ifnull([customer_age],'N/A'),'PRIOR CALENDAR YEARS','')"
          }
        },
        "Reporting Month - MonYr": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - MonYr",
          "datatype": "string",
          "default_format": "*mmm yyyy",
          "name": "[Reporting Month (copy)_679199125609013251]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[calmonth (copy)_679199125335912450]),3) + ' '+datename('year',[calmonth (copy)_679199125335912450])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[calmonth (copy)_679199125335912450]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[churn_text]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"N\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"N\"",
              "value": "Permanent"
            },
            "\"Y\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"Y\"",
              "value": "Temporary Contracts"
            }
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[calmonth (copy)_679199125335912450]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calmonth (copy)_679199125335912450]",
          "derivation": "MY",
          "name": "[my:calmonth (copy)_679199125335912450:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_679199125983191045]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_679199125983191045]",
          "derivation": "None",
          "name": "[none:Calculation_679199125983191045:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month (copy)_679199125609013251]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month (copy)_679199125609013251]",
          "derivation": "None",
          "name": "[none:Reporting Month (copy)_679199125609013251:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[churn_text]",
          "derivation": "None",
          "name": "[none:churn_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_1195705709998415872]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1195705709998415872]",
          "derivation": "User",
          "name": "[usr:Calculation_1195705709998415872:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[my:calmonth (copy)_679199125335912450:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:calmonth (copy)_679199125335912450:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:churn_text:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:churn_text:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CPD 5+ CustAge Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CPD 5+ CustAge Graph",
      "data_sources": {
        "federated.1pb2as311sw84e13u5qz60192nfm": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent_product",
          "name": "federated.1pb2as311sw84e13u5qz60192nfm"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_1195705709998415872]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "customer_age revised": {
          "py/object": "models.Column.Column",
          "caption": "customer_age revised",
          "datatype": "string",
          "name": "[Calculation_679199125983191045]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "REPLACE(ifnull([customer_age],'N/A'),'PRIOR CALENDAR YEARS','')"
          }
        },
        "Reporting Month - MonYr": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - MonYr",
          "datatype": "string",
          "default_format": "*mmm yyyy",
          "name": "[Reporting Month (copy)_679199125609013251]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[calmonth (copy)_679199125335912450]),3) + ' '+datename('year',[calmonth (copy)_679199125335912450])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[calmonth (copy)_679199125335912450]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Cancellation Reason": {
          "py/object": "models.Column.Column",
          "caption": "Cancellation Reason",
          "datatype": "string",
          "name": "[cancellation_reason_description]",
          "role": "dimension",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[churn_text]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718723780609]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "[parent_last_product]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_last_product]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"N\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"N\"",
              "value": "Permanent"
            },
            "\"Y\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"Y\"",
              "value": "Temporary Contracts"
            }
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[calmonth (copy)_679199125335912450]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calmonth (copy)_679199125335912450]",
          "derivation": "MY",
          "name": "[my:calmonth (copy)_679199125335912450:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_679199125983191045]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_679199125983191045]",
          "derivation": "None",
          "name": "[none:Calculation_679199125983191045:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month (copy)_679199125609013251]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month (copy)_679199125609013251]",
          "derivation": "None",
          "name": "[none:Reporting Month (copy)_679199125609013251:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[cancellation_reason_description]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[cancellation_reason_description]",
          "derivation": "None",
          "name": "[none:cancellation_reason_description:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[churn_text]",
          "derivation": "None",
          "name": "[none:churn_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718723780609]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718723780609]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718723780609:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size]",
          "derivation": "None",
          "name": "[none:customer_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_last_product]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_last_product]",
          "derivation": "None",
          "name": "[none:parent_last_product:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_1195705709998415872]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1195705709998415872]",
          "derivation": "User",
          "name": "[usr:Calculation_1195705709998415872:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[my:calmonth (copy)_679199125335912450:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:calmonth (copy)_679199125335912450:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:cancellation_reason_description:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:cancellation_reason_description:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:churn_text:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:churn_text:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:customer_age:nk]",
              "member": "\"5 PRIOR CALENDAR YEARS OR MORE\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_size (copy)_1150669718723780609:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718723780609:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:parent_last_product:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_last_product:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CPD Product Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CPD Product Graph",
      "data_sources": {
        "federated.1pb2as311sw84e13u5qz60192nfm": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent_product",
          "name": "federated.1pb2as311sw84e13u5qz60192nfm"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_1195705709998415872]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month - MonYr": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - MonYr",
          "datatype": "string",
          "default_format": "*mmm yyyy",
          "name": "[Reporting Month (copy)_679199125609013251]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[calmonth (copy)_679199125335912450]),3) + ' '+datename('year',[calmonth (copy)_679199125335912450])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[calmonth (copy)_679199125335912450]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[churn_text]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718723780609]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"N\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"N\"",
              "value": "Permanent"
            },
            "\"Y\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"Y\"",
              "value": "Temporary Contracts"
            }
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[calmonth (copy)_679199125335912450]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calmonth (copy)_679199125335912450]",
          "derivation": "MY",
          "name": "[my:calmonth (copy)_679199125335912450:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Reporting Month (copy)_679199125609013251]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month (copy)_679199125609013251]",
          "derivation": "None",
          "name": "[none:Reporting Month (copy)_679199125609013251:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[churn_text]",
          "derivation": "None",
          "name": "[none:churn_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718723780609]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718723780609]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718723780609:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_1195705709998415872]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1195705709998415872]",
          "derivation": "User",
          "name": "[usr:Calculation_1195705709998415872:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[my:calmonth (copy)_679199125335912450:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:calmonth (copy)_679199125335912450:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_size (copy)_1150669718723780609:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718723780609:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CPD Table": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CPD Table",
      "data_sources": {
        "federated.1pb2as311sw84e13u5qz60192nfm": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent_product",
          "name": "federated.1pb2as311sw84e13u5qz60192nfm"
        }
      },
      "columns": {
        "Contract Type (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type (copy)",
          "datatype": "string",
          "name": "[Calculation_1101411598481321989]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [temporary_contract_flag] when 'N' then 'Lost Revenue' else 'Contract Expired (In Negotiation)' end"
          }
        },
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_1195705709998415872]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "Reporting Month - MonYr": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - MonYr",
          "datatype": "string",
          "default_format": "*mmm yyyy",
          "name": "[Reporting Month (copy)_679199125609013251]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[calmonth (copy)_679199125335912450]),3) + ' '+datename('year',[calmonth (copy)_679199125335912450])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[calmonth (copy)_679199125335912450]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Cancellation Reason": {
          "py/object": "models.Column.Column",
          "caption": "Cancellation Reason",
          "datatype": "string",
          "name": "[cancellation_reason_description]",
          "role": "dimension",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[churn_text]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "customer_size (copy)": {
          "py/object": "models.Column.Column",
          "caption": "customer_size (copy)",
          "datatype": "string",
          "name": "[customer_size (copy)_1150669718723780609]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [customer_size] when 'L' then 'Lg (>$100K)' when 'M' then 'Med (>$25K-$100K)' when 'S' then 'Sm ($0-$25K)' END"
          }
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Parent": {
          "py/object": "models.Column.Column",
          "caption": "Parent",
          "datatype": "string",
          "name": "[parent_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "Product Group": {
          "py/object": "models.Column.Column",
          "caption": "Product Group",
          "datatype": "string",
          "name": "[product_sub_grp]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"N\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"N\"",
              "value": "Permanent"
            },
            "\"Y\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"Y\"",
              "value": "Temporary Contracts"
            }
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[calmonth (copy)_679199125335912450]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calmonth (copy)_679199125335912450]",
          "derivation": "MY",
          "name": "[my:calmonth (copy)_679199125335912450:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_1101411598481321989]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1101411598481321989]",
          "derivation": "None",
          "name": "[none:Calculation_1101411598481321989:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Reporting Month (copy)_679199125609013251]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month (copy)_679199125609013251]",
          "derivation": "None",
          "name": "[none:Reporting Month (copy)_679199125609013251:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[cancellation_reason_description]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[cancellation_reason_description]",
          "derivation": "None",
          "name": "[none:cancellation_reason_description:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[churn_text]",
          "derivation": "None",
          "name": "[none:churn_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_age]",
          "derivation": "None",
          "name": "[none:customer_age:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size (copy)_1150669718723780609]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size (copy)_1150669718723780609]",
          "derivation": "None",
          "name": "[none:customer_size (copy)_1150669718723780609:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size]",
          "derivation": "None",
          "name": "[none:customer_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_name]",
          "derivation": "None",
          "name": "[none:parent_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_sub_grp]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_sub_grp]",
          "derivation": "None",
          "name": "[none:product_sub_grp:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_1195705709998415872]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1195705709998415872]",
          "derivation": "User",
          "name": "[usr:Calculation_1195705709998415872:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[my:calmonth (copy)_679199125335912450:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:calmonth (copy)_679199125335912450:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:Calculation_1101411598481321989:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:Calculation_1101411598481321989:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:cancellation_reason_description:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:cancellation_reason_description:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:churn_text:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:churn_text:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_age:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_age:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_size (copy)_1150669718723780609:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size (copy)_1150669718723780609:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:product_sub_grp:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:product_sub_grp:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "CPD product Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "CPD product Graph",
      "data_sources": {
        "federated.1pb2as311sw84e13u5qz60192nfm": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent_product",
          "name": "federated.1pb2as311sw84e13u5qz60192nfm"
        }
      },
      "columns": {
        "countd_Parent": {
          "py/object": "models.Column.Column",
          "caption": "countd_Parent",
          "datatype": "integer",
          "name": "[Calculation_1195705709998415872]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "countd([parent_key])"
          }
        },
        "customer_age revised": {
          "py/object": "models.Column.Column",
          "caption": "customer_age revised",
          "datatype": "string",
          "name": "[Calculation_679199125983191045]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "REPLACE(ifnull([customer_age],'N/A'),'PRIOR CALENDAR YEARS','')"
          }
        },
        "Reporting Month - MonYr": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - MonYr",
          "datatype": "string",
          "default_format": "*mmm yyyy",
          "name": "[Reporting Month (copy)_679199125609013251]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[calmonth (copy)_679199125335912450]),3) + ' '+datename('year',[calmonth (copy)_679199125335912450])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[calmonth (copy)_679199125335912450]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[churn_text]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_age]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_age]",
          "role": "dimension",
          "type": "nominal"
        },
        "Market": {
          "py/object": "models.Column.Column",
          "caption": "Market",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Country",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_key]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_key]",
          "role": "dimension",
          "type": "nominal"
        },
        "Product Group": {
          "py/object": "models.Column.Column",
          "caption": "Product Group",
          "datatype": "string",
          "name": "[product_sub_grp]",
          "role": "dimension",
          "type": "nominal"
        },
        "Industry": {
          "py/object": "models.Column.Column",
          "caption": "Industry",
          "datatype": "string",
          "name": "[site_org_type]",
          "role": "dimension",
          "type": "nominal"
        },
        "Contract Type": {
          "py/object": "models.Column.Column",
          "caption": "Contract Type",
          "datatype": "string",
          "name": "[temporary_contract_flag]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"N\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"N\"",
              "value": "Permanent"
            },
            "\"Y\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"Y\"",
              "value": "Temporary Contracts"
            }
          }
        },
        "[total_churn_usde]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[total_churn_usde]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[calmonth (copy)_679199125335912450]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calmonth (copy)_679199125335912450]",
          "derivation": "MY",
          "name": "[my:calmonth (copy)_679199125335912450:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Reporting Month (copy)_679199125609013251]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Reporting Month (copy)_679199125609013251]",
          "derivation": "None",
          "name": "[none:Reporting Month (copy)_679199125609013251:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[churn_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[churn_text]",
          "derivation": "None",
          "name": "[none:churn_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_size]",
          "derivation": "None",
          "name": "[none:customer_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_sub_grp]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_sub_grp]",
          "derivation": "None",
          "name": "[none:product_sub_grp:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[site_org_type]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[site_org_type]",
          "derivation": "None",
          "name": "[none:site_org_type:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[temporary_contract_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[temporary_contract_flag]",
          "derivation": "None",
          "name": "[none:temporary_contract_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[total_churn_usde]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[total_churn_usde]",
          "derivation": "Sum",
          "name": "[sum:total_churn_usde:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_1195705709998415872]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1195705709998415872]",
          "derivation": "User",
          "name": "[usr:Calculation_1195705709998415872:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[Tooltip (Reporting Month - MonYr,Market,Contract Type)]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "crossjoin",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[Tooltip (customer_age revised,Reporting Month - MonYr,Contract Type)]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "crossjoin",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[my:calmonth (copy)_679199125335912450:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:calmonth (copy)_679199125335912450:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:churn_text:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:churn_text:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:customer_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1pb2as311sw84e13u5qz60192nfm].[none:site_org_type:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:site_org_type:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Cap Exp Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Cap Exp Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0026\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Cap Exp Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Cap Exp Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0026\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Cap Exp Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Cap Exp Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0026\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Capital Expenditures": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Capital Expenditures",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0026\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Churn": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Churn Definitions cust": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Definitions cust",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Churn Definitions": {
          "py/object": "models.Column.Column",
          "caption": "Churn Definitions",
          "datatype": "string",
          "name": "[Calculation_950259537141510144]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "''"
          }
        }
      },
      "column_instances": {
        "[Calculation_950259537141510144]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_950259537141510144]",
          "derivation": "None",
          "name": "[none:Calculation_950259537141510144:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": []
    },
    "Churn Definitions prod": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Definitions prod",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Churn Definitions": {
          "py/object": "models.Column.Column",
          "caption": "Churn Definitions",
          "datatype": "string",
          "name": "[Calculation_950259537141510144]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "''"
          }
        }
      },
      "column_instances": {
        "[Calculation_950259537141510144]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_950259537141510144]",
          "derivation": "None",
          "name": "[none:Calculation_950259537141510144:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": []
    },
    "Churn Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Churn Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Churn Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Churn History Table": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn History Table",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "Month",
          "name": "[mn:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[Tooltip (Kpi Title)]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[kpi_title]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Churn Map info": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Map info",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Churn Definitions": {
          "py/object": "models.Column.Column",
          "caption": "Churn Definitions",
          "datatype": "string",
          "name": "[Calculation_950259537141510144]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "''"
          }
        }
      },
      "column_instances": {
        "[Calculation_950259537141510144]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_950259537141510144]",
          "derivation": "None",
          "name": "[none:Calculation_950259537141510144:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": []
    },
    "Churn Table": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Churn Table",
      "data_sources": {
        "federated.1lr7nfm1rx5vi112qzxe31k02o27": {
          "py/object": "models.DataSource.DataSource",
          "caption": "pr_churn_product",
          "name": "federated.1lr7nfm1rx5vi112qzxe31k02o27"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[Calculation_466685514769997827]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([calmonth]),4)),\r\nint(mid(str([calmonth]),5,2)),\r\nint(right(str([calmonth]),2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[esd_tile]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[esd_tile]",
          "role": "dimension",
          "type": "nominal"
        },
        "Product": {
          "py/object": "models.Column.Column",
          "caption": "Product",
          "datatype": "string",
          "name": "[product_grp_text]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"SCIFINDER\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"SCIFINDER\"",
              "value": "SCIFINDER OVERALL "
            },
            "\"SCIFINDER ACADEMIC\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"SCIFINDER ACADEMIC\"",
              "value": "- SCIFINDER ACADEMIC"
            },
            "\"SCIFINDER COMMERCIAL\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"SCIFINDER COMMERCIAL\"",
              "value": "- SCIFINDER COMMERCIAL"
            },
            "\"STN C CAS\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"STN C CAS\"",
              "value": "STN: CAS & STNC FILES"
            },
            "\"STN CAS FORMULATIONS\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"STN CAS FORMULATIONS\"",
              "value": "STN: CAS FORMULATIONS"
            }
          }
        },
        "[rate]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[rate]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_466685514769997827]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_466685514769997827]",
          "derivation": "MY",
          "name": "[my:Calculation_466685514769997827:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[esd_tile]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[esd_tile]",
          "derivation": "None",
          "name": "[none:esd_tile:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_grp_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_grp_text]",
          "derivation": "None",
          "name": "[none:product_grp_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[rate]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[rate]",
          "derivation": "Sum",
          "name": "[sum:rate:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1lr7nfm1rx5vi112qzxe31k02o27].[my:Calculation_466685514769997827:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "count": "1",
              "end": "top",
              "function": "end",
              "units": "records",
              "ui_marker": "end"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1lr7nfm1rx5vi112qzxe31k02o27].[none:esd_tile:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:esd_tile:nk]",
              "member": "\"Churn\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1lr7nfm1rx5vi112qzxe31k02o27].[none:product_grp_text:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Culture Score (eNPS)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Culture Score (eNPS)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0023\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Culture Score Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Culture Score Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0023\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Culture Score Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Culture Score Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0023\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Culture Score Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Culture Score Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0023\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Customer Effort": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Customer Effort",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0012\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Customer Effort Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Customer Effort Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0012\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Customer Effort Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Customer Effort Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0012\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Customer Effort Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Customer Effort Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0012\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Customer Effort Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Customer Effort Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0012\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Customer Experience Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Customer Experience Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Data Analytics Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Data Analytics Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S005\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Delete? PR by Product ": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Delete? PR by Product ",
      "data_sources": {
        "federated.06kco84062piu819yxlb00lxfmwo": {
          "py/object": "models.DataSource.DataSource",
          "caption": "price_realization_detail",
          "name": "federated.06kco84062piu819yxlb00lxfmwo"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[Calculation_587438303138983937]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "SUM([acv_net_diff])/sum([Previous ACV])": {
          "py/object": "models.Column.Column",
          "caption": "SUM([acv_net_diff])/sum([Previous ACV])",
          "datatype": "real",
          "name": "[Calculation_587438303144382469]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "PR by product": {
          "py/object": "models.Column.Column",
          "caption": "PR by product",
          "datatype": "real",
          "name": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed ([product_group (copy)_587438303141892100]): sum([acv_net_diff])/sum([pre_annual_contract_value])}"
          }
        },
        "PR by product subgroup": {
          "py/object": "models.Column.Column",
          "caption": "PR by product subgroup",
          "datatype": "real",
          "name": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed ([pro_sub_group (copy)_587438303141797890]): sum([acv_net_diff])/sum([pre_annual_contract_value])}"
          }
        },
        "[acv_net_diff]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[acv_net_diff]",
          "role": "measure",
          "type": "quantitative"
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "Previous ACV": {
          "py/object": "models.Column.Column",
          "caption": "Previous ACV",
          "datatype": "real",
          "name": "[pre_annual_contract_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "pro_sub_group replaced": {
          "py/object": "models.Column.Column",
          "caption": "pro_sub_group replaced",
          "datatype": "string",
          "name": "[pro_sub_group (copy)_587438303141797890]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "replace([pro_sub_group],case [product_group] when 'SCIFINDER' then 'SF' else [product_group] end,'')"
          }
        },
        "[pro_sub_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[pro_sub_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "product_group (copy)": {
          "py/object": "models.Column.Column",
          "caption": "product_group (copy)",
          "datatype": "string",
          "name": "[product_group (copy)_587438303141892100]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[product_group]"
          }
        },
        "[product_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[product_group]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[Calculation_587438303138983937]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303138983937]",
          "derivation": "MY",
          "name": "[my:Calculation_587438303138983937:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[product_group (copy)_587438303141892100]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_group (copy)_587438303141892100]",
          "derivation": "None",
          "name": "[none:product_group (copy)_587438303141892100:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091]",
          "derivation": "Sum",
          "name": "[sum:SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757]",
          "derivation": "Sum",
          "name": "[sum:SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_587438303144382469]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303144382469]",
          "derivation": "User",
          "name": "[usr:Calculation_587438303144382469:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[my:Calculation_587438303138983937:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_587438303138983937:ok]",
              "member": "202008"
            }
          ]
        }
      ]
    },
    "Delete? PR by Product - Renewal Status": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Delete? PR by Product - Renewal Status",
      "data_sources": {
        "federated.06kco84062piu819yxlb00lxfmwo": {
          "py/object": "models.DataSource.DataSource",
          "caption": "price_realization_detail",
          "name": "federated.06kco84062piu819yxlb00lxfmwo"
        }
      },
      "columns": {
        "SUM([acv_net_diff])/sum([Previous ACV])": {
          "py/object": "models.Column.Column",
          "caption": "SUM([acv_net_diff])/sum([Previous ACV])",
          "datatype": "real",
          "name": "[Calculation_587438303144382469]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "PR by product": {
          "py/object": "models.Column.Column",
          "caption": "PR by product",
          "datatype": "real",
          "name": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed ([product_group (copy)_587438303141892100]): sum([acv_net_diff])/sum([pre_annual_contract_value])}"
          }
        },
        "PR by product subgroup": {
          "py/object": "models.Column.Column",
          "caption": "PR by product subgroup",
          "datatype": "real",
          "name": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed ([pro_sub_group (copy)_587438303141797890]): sum([acv_net_diff])/sum([pre_annual_contract_value])}"
          }
        },
        "[acv_net_diff]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[acv_net_diff]",
          "role": "measure",
          "type": "quantitative"
        },
        "Previous ACV": {
          "py/object": "models.Column.Column",
          "caption": "Previous ACV",
          "datatype": "real",
          "name": "[pre_annual_contract_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "pro_sub_group replaced": {
          "py/object": "models.Column.Column",
          "caption": "pro_sub_group replaced",
          "datatype": "string",
          "name": "[pro_sub_group (copy)_587438303141797890]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "replace([pro_sub_group],case [product_group] when 'SCIFINDER' then 'SF' else [product_group] end,'')"
          }
        },
        "[pro_sub_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[pro_sub_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "product_group (copy)": {
          "py/object": "models.Column.Column",
          "caption": "product_group (copy)",
          "datatype": "string",
          "name": "[product_group (copy)_587438303141892100]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[product_group]"
          }
        },
        "[product_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[product_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "Renewal Status": {
          "py/object": "models.Column.Column",
          "caption": "Renewal Status",
          "datatype": "string",
          "name": "[renewal_status (copy)_587438303141834755]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "trim(replace([renewal_status], [product_group (copy)_587438303141892100],''))"
          }
        },
        "[renewal_status]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[renewal_status]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[pro_sub_group (copy)_587438303141797890]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pro_sub_group (copy)_587438303141797890]",
          "derivation": "None",
          "name": "[none:pro_sub_group (copy)_587438303141797890:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_group (copy)_587438303141892100]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_group (copy)_587438303141892100]",
          "derivation": "None",
          "name": "[none:product_group (copy)_587438303141892100:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[renewal_status (copy)_587438303141834755]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[renewal_status (copy)_587438303141834755]",
          "derivation": "None",
          "name": "[none:renewal_status (copy)_587438303141834755:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091]",
          "derivation": "Sum",
          "name": "[sum:SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303404974091:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757]",
          "derivation": "Sum",
          "name": "[sum:SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) by product (copy)_587438303410335757:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_587438303144382469]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303144382469]",
          "derivation": "User",
          "name": "[usr:Calculation_587438303144382469:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": []
    },
    "EDS Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "EDS Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0008\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Engagement Delivery Status": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Engagement Delivery Status",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_632192816620109824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_632192816620109824]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_632192816620109824:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0008\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Engagement NPS": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Engagement NPS",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_632192816620109824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_632192816620109824]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_632192816620109824:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0009\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Engagement NPS Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Engagement NPS Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0009\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Engagement NPS Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Engagement NPS Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0009\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Engagement NPS Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Engagement NPS Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0009\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Financial Performance Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Financial Performance Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S008\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Formulus Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Formulus Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_1773010940825149446]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_1773010940825149446]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_1773010940825149446]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_1773010940825149446:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Formulus Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Formulus Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_1773010940825149446]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_1773010940825149446]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_1773010940825149446]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_1773010940825149446:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Formulus Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Formulus Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Formulus Graph Monthly (3)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Formulus Graph Monthly (3)",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Color monthly metrics GRAPH": {
          "py/object": "models.Column.Column",
          "caption": "Color monthly metrics GRAPH",
          "datatype": "string",
          "name": "[Color (copy)_1346576350710231045]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Backwards Color Group]='KPIBC' \r\nthen if [monthly_kpi_metric_value]<= [monthly_kpi_target_outstanding] then 'dark green'\r\n    ELSEIF  [monthly_kpi_metric_value]<=[monthly_kpi_target_max] then 'green'\r\n    ELSEIF [monthly_kpi_metric_value]<[monthly_kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\nELSEIF [monthly_kpi_metric_value]>=[monthly_kpi_target_outstanding] then 'dark green'\r\nELSEIF  [monthly_kpi_metric_value]>=[monthly_kpi_target_max] then 'green'\r\n    ELSEIF [monthly_kpi_metric_value]>[monthly_kpi_target_min] then 'yellow'\r\n    else 'red'\r\n\r\nEND"
          }
        },
        "Format Switch Metric Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric Monthly",
          "datatype": "string",
          "name": "[Format Switch Metric (copy)_5305240406968721411]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_4067031998566608900]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max Monthly",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_5305240406969278468]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding Monthly",
          "datatype": "string",
          "name": "[Format Switch Target Max Monthly (copy)_1346576349329256449]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Min Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min Monthly",
          "datatype": "string",
          "name": "[Format Switch Target Min (copy)_5305240406969466885]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Metric (copy)_5305240406968721411]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Metric (copy)_5305240406968721411]",
          "derivation": "None",
          "name": "[none:Format Switch Metric (copy)_5305240406968721411:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_4067031998566608900]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_4067031998566608900]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_4067031998566608900:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_5305240406969278468]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_5305240406969278468]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_5305240406969278468:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max Monthly (copy)_1346576349329256449]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max Monthly (copy)_1346576349329256449]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max Monthly (copy)_1346576349329256449:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Min (copy)_5305240406969466885]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Min (copy)_5305240406969466885]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Min (copy)_5305240406969466885:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color (copy)_1346576350710231045]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color (copy)_1346576350710231045]",
          "derivation": "None",
          "name": "[none:Color (copy)_1346576350710231045:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Formulus Graph area": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Formulus Graph area",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_4067031998566608900]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value (copy)",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_1346576350713745414]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value]"
          }
        },
        "YellowforArea": {
          "py/object": "models.Column.Column",
          "caption": "YellowforArea",
          "datatype": "real",
          "name": "[Kpi Target Max (copy)_1527564737371901957]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_max]>[kpi_target_min] then [kpi_target_max]-([kpi_target_min]//+1 //changed this when added outstanding (not sure why +1?)\r\n)\r\nelse 0 END"
          }
        },
        "OutstandingforArea ": {
          "py/object": "models.Column.Column",
          "caption": "OutstandingforArea ",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([kpi_id]) :max([kpi_target_outstanding])} - [kpi_target_outstanding]"
          }
        },
        "TargetforArea (with outstanding)": {
          "py/object": "models.Column.Column",
          "caption": "TargetforArea (with outstanding)",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_outstanding]>[kpi_target_max] then [kpi_target_outstanding]-([kpi_target_max]//+1\r\n)\r\nelse 0 END"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_4067031998566608900]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_4067031998566608900]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_4067031998566608900:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Kpi Metric Value (copy)_1346576350713745414]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value (copy)_1346576350713745414]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value (copy)_1346576350713745414:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Kpi Target Max (copy)_1527564737371901957]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Target Max (copy)_1527564737371901957]",
          "derivation": "Sum",
          "name": "[sum:Kpi Target Max (copy)_1527564737371901957:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998546128898]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998546128898:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998547259395]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998547259395:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Formulus Revenue": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Formulus Revenue",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_1773010940825149446]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_1773010940825149446]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_1773010940825149446]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_1773010940825149446:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0003\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "HPA Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "HPA Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0018\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "HPA Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "HPA Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0018\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "HPA Details Link ": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "HPA Details Link ",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0018\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Headcount Plan": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Headcount Plan",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "' '+[Kpi Title]": {
          "py/object": "models.Column.Column",
          "caption": "' '+[Kpi Title]",
          "datatype": "string",
          "name": "[Calculation_656399664612597760]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "' '+[kpi_title]"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_656399664612597760]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_656399664612597760]",
          "derivation": "None",
          "name": "[none:Calculation_656399664612597760:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0021\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Headcount Plan Attainment": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Headcount Plan Attainment",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "Attribute",
          "name": "[attr:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0018\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Headcount Plan Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Headcount Plan Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0021\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Headcount Plan Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Headcount Plan Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0021\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Headcount Plan Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Headcount Plan Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0021\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Headcount Plan Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Headcount Plan Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0021\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Header Customer Churn Detail (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Header Customer Churn Detail (2)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Header Customer Churn Detail ": {
          "py/object": "models.Column.Column",
          "caption": "Header Customer Churn Detail ",
          "datatype": "string",
          "name": "[Product Churn Detail Header (copy)_992199304305254404]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "'Customer Churn Detail'"
          }
        }
      },
      "column_instances": {
        "[Product Churn Detail Header (copy)_992199304305254404]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Product Churn Detail Header (copy)_992199304305254404]",
          "derivation": "None",
          "name": "[none:Product Churn Detail Header (copy)_992199304305254404:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": []
    },
    "Header Customer Churn Detail (3)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Header Customer Churn Detail (3)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Header Customer Churn Detail ": {
          "py/object": "models.Column.Column",
          "caption": "Header Customer Churn Detail ",
          "datatype": "string",
          "name": "[Product Churn Detail Header (copy)_992199304305254404]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "'Customer Churn Detail'"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Product Churn Detail Header (copy)_992199304305254404]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Product Churn Detail Header (copy)_992199304305254404]",
          "derivation": "None",
          "name": "[none:Product Churn Detail Header (copy)_992199304305254404:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Header Product Churn Detail ": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Header Product Churn Detail ",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Header Product Churn Detail ": {
          "py/object": "models.Column.Column",
          "caption": "Header Product Churn Detail ",
          "datatype": "string",
          "name": "[Color KPI Detail Link (copy)_679199125289766913]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "'Product Churn Detail'"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[Color KPI Detail Link (copy)_679199125289766913]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color KPI Detail Link (copy)_679199125289766913]",
          "derivation": "None",
          "name": "[none:Color KPI Detail Link (copy)_679199125289766913:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "INPI Delivery Status": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "INPI Delivery Status",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_632192816620109824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_632192816620109824]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_632192816620109824:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0019\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "INPI Delivery Status Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "INPI Delivery Status Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0019\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "INPI Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "INPI Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0019\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "INPI Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "INPI Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0019\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "INPI Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "INPI Graph",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937399463942]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color for history status ": {
          "py/object": "models.Column.Column",
          "caption": "Color for history status ",
          "datatype": "string",
          "name": "[Color (copy)_1527564737022660608]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([metric_expiration_date_key]) then 'grey'\r\nelse [Color with Outstanding (copy)_614459937399463942] END"
          }
        },
        "Color Status Text for graph": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text for graph",
          "datatype": "string",
          "name": "[Color Status Text (copy)_1527564737045377025]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color (copy)_1527564737022660608]='grey' then ' ' \r\nELSEIF [Color (copy)_1527564737022660608]='orange' then 'No Data Available'\r\nelse [Calculation_632192816620109824] END"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Metric Expiration Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Expiration Date Key",
          "datatype": "integer",
          "name": "[metric_expiration_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color (copy)_1527564737022660608]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color (copy)_1527564737022660608]",
          "derivation": "None",
          "name": "[none:Color (copy)_1527564737022660608:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Color Status Text (copy)_1527564737045377025]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color Status Text (copy)_1527564737045377025]",
          "derivation": "None",
          "name": "[none:Color Status Text (copy)_1527564737045377025:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0019\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "IP/Patent Space Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "IP/Patent Space Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S006\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Inquiries": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Inquiries",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "Attribute",
          "name": "[attr:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0017\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Inquiries Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Inquiries Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0017\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Inquiries Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Inquiries Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0017\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Inquiries Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Inquiries Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0017\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Inquiries Graph Monthly": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Inquiries Graph Monthly",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0017\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Inquiries Graph area": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Inquiries Graph area",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Kpi Metric Value (copy) (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value (copy) (copy)",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy) (copy)_679199124967325696]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value]"
          }
        },
        "Kpi Metric Value (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value (copy)",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_1346576350713745414]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value]"
          }
        },
        "YellowforArea": {
          "py/object": "models.Column.Column",
          "caption": "YellowforArea",
          "datatype": "real",
          "name": "[Kpi Target Max (copy)_1527564737371901957]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_max]>[kpi_target_min] then [kpi_target_max]-([kpi_target_min]//+1 //changed this when added outstanding (not sure why +1?)\r\n)\r\nelse 0 END"
          }
        },
        "OutstandingforArea ": {
          "py/object": "models.Column.Column",
          "caption": "OutstandingforArea ",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([kpi_id]) :max([kpi_target_outstanding])} - [kpi_target_outstanding]"
          }
        },
        "TargetforArea (with outstanding)": {
          "py/object": "models.Column.Column",
          "caption": "TargetforArea (with outstanding)",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_outstanding]>[kpi_target_max] then [kpi_target_outstanding]-([kpi_target_max]//+1\r\n)\r\nelse 0 END"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Kpi Metric Value (copy) (copy)_679199124967325696]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value (copy) (copy)_679199124967325696]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value (copy) (copy)_679199124967325696:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Kpi Metric Value (copy)_1346576350713745414]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value (copy)_1346576350713745414]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value (copy)_1346576350713745414:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Kpi Target Max (copy)_1527564737371901957]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Target Max (copy)_1527564737371901957]",
          "derivation": "Sum",
          "name": "[sum:Kpi Target Max (copy)_1527564737371901957:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998546128898]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998546128898:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998547259395]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998547259395:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0017\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "LION Delivery Status": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "LION Delivery Status",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0020\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "LION Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "LION Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0020\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "LION Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "LION Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0020\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "LION Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "LION Graph",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937399463942]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color for history status ": {
          "py/object": "models.Column.Column",
          "caption": "Color for history status ",
          "datatype": "string",
          "name": "[Color (copy)_1527564737022660608]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([metric_expiration_date_key]) then 'grey'\r\nelse [Color with Outstanding (copy)_614459937399463942] END"
          }
        },
        "Color Status Text for graph": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text for graph",
          "datatype": "string",
          "name": "[Color Status Text (copy)_1527564737045377025]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color (copy)_1527564737022660608]='grey' then ' ' \r\nELSEIF [Color (copy)_1527564737022660608]='orange' then 'No Data Available'\r\nelse [Calculation_632192816620109824] END"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Metric Expiration Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Expiration Date Key",
          "datatype": "integer",
          "name": "[metric_expiration_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color (copy)_1527564737022660608]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color (copy)_1527564737022660608]",
          "derivation": "None",
          "name": "[none:Color (copy)_1527564737022660608:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Color Status Text (copy)_1527564737045377025]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color Status Text (copy)_1527564737045377025]",
          "derivation": "None",
          "name": "[none:Color Status Text (copy)_1527564737045377025:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0020\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "LION Status Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "LION Status Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0020\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Latest Update Date": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Latest Update Date",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Latest Update Date": {
          "py/object": "models.Column.Column",
          "caption": "Latest Update Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[Kpi Effective Date (copy)_632192817730793474]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATE({ FIXED: MAX([update_date])})"
          }
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Kpi Effective Date (copy)_632192817730793474]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Effective Date (copy)_632192817730793474]",
          "derivation": "None",
          "name": "[none:Kpi Effective Date (copy)_632192817730793474:ok]",
          "pivot": "key",
          "type": "ordinal"
        }
      },
      "filters": []
    },
    "MGS # Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MGS # Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0014\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MGS # Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MGS # Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0014\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MGS $ Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MGS $ Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0016\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MGS $ Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MGS $ Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0016\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MIS # Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MIS # Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0013\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MIS # Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MIS # Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0013\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MIS $ Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MIS $ Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0015\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "MIS $ Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "MIS $ Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0015\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Map-Churn Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Map-Churn Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0029\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Marketing # Graph (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing # Graph (2)",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "MktGen#_mnthlygraph_target": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_mnthlygraph_target",
          "datatype": "real",
          "name": "[MktGen#_outstanding_graph (copy)_1346576350770180107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0014'\r\nthen [monthly_kpi_target_max]\r\nend)}"
          }
        },
        "MktGen#_mnthlygraph_min": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_mnthlygraph_min",
          "datatype": "real",
          "name": "[MktGen#_target_graph (copy)_1346576350770315276]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0014'\r\nthen [monthly_kpi_target_min]\r\nend)}"
          }
        },
        "MktGen#_mnthlygraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_mnthlygraph_metric",
          "datatype": "real",
          "name": "[MktGen$_test (copy) (copy)_5210101869776977925]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0014'\r\n            then [monthly_kpi_metric_value]\r\nend)}"
          }
        },
        "MktInf#_mnthlygraph_outstanding": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_mnthlygraph_outstanding",
          "datatype": "real",
          "name": "[MktInf#_min_graph (copy)_1346576350765502473]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [monthly_kpi_target_outstanding]\r\nend)}"
          }
        },
        "MktGen#_mnthlygraph_outstanding": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_mnthlygraph_outstanding",
          "datatype": "real",
          "name": "[MktInf#_outstanding_graph (copy)_1346576350770028554]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0014'\r\nthen [monthly_kpi_target_outstanding]\r\nend)}"
          }
        },
        "MktInf#_mnthlygraph_min": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_mnthlygraph_min",
          "datatype": "real",
          "name": "[MktInf#_target_graph (copy)_1346576350765371400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [monthly_kpi_target_min]\r\nend)}"
          }
        },
        "MktInf#_mnthlygraph_target": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_mnthlygraph_target",
          "datatype": "real",
          "name": "[MktInf#_test (copy) (copy) (copy)_1346576350764642311]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [monthly_kpi_target_max]\r\nend)}"
          }
        },
        "MktInf#_mnthlygraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_mnthlygraph_metric",
          "datatype": "real",
          "name": "[MktInf$_test (copy) (copy)_5210101869776576516]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [monthly_kpi_metric_value]\r\nend)}"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[MktGen#_outstanding_graph (copy)_1346576350770180107]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen#_outstanding_graph (copy)_1346576350770180107]",
          "derivation": "Sum",
          "name": "[sum:MktGen#_outstanding_graph (copy)_1346576350770180107:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktGen#_target_graph (copy)_1346576350770315276]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen#_target_graph (copy)_1346576350770315276]",
          "derivation": "Sum",
          "name": "[sum:MktGen#_target_graph (copy)_1346576350770315276:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktGen$_test (copy) (copy)_5210101869776977925]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test (copy) (copy)_5210101869776977925]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test (copy) (copy)_5210101869776977925:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_min_graph (copy)_1346576350765502473]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_min_graph (copy)_1346576350765502473]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_min_graph (copy)_1346576350765502473:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_outstanding_graph (copy)_1346576350770028554]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_outstanding_graph (copy)_1346576350770028554]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_outstanding_graph (copy)_1346576350770028554:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_target_graph (copy)_1346576350765371400]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_target_graph (copy)_1346576350765371400]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_target_graph (copy)_1346576350765371400:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_test (copy) (copy) (copy)_1346576350764642311]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_test (copy) (copy) (copy)_1346576350764642311]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_test (copy) (copy) (copy)_1346576350764642311:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf$_test (copy) (copy)_5210101869776576516]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf$_test (copy) (copy)_5210101869776576516]",
          "derivation": "Sum",
          "name": "[sum:MktInf$_test (copy) (copy)_5210101869776576516:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Marketing # Graph YTD": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing # Graph YTD",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "MktGen#_YTDgraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_YTDgraph_metric",
          "datatype": "real",
          "default_format": "n#,##0;-#,##0",
          "name": "[MktGen#_test (copy) (copy) (copy)_570831310660345857]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0014'\r\n            then [kpi_metric_value]\r\nend)}"
          }
        },
        "MktGen#_mnthlygraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_mnthlygraph_metric",
          "datatype": "real",
          "name": "[MktGen$_test (copy) (copy)_5210101869776977925]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0014'\r\n            then [monthly_kpi_metric_value]\r\nend)}"
          }
        },
        "MktGen#_YTDgraph_TARGET": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_YTDgraph_TARGET",
          "datatype": "real",
          "default_format": "n#,##0,,.0M;-#,##0,,.0M",
          "name": "[MktGen$_test YTD (copy)_1773010940772851715]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0014' \r\n            then [kpi_target_max]\r\n            end)}"
          }
        },
        "MktGen#_YTDgraph_MIN": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_YTDgraph_MIN",
          "datatype": "real",
          "default_format": "n#,##0,,.0M;-#,##0,,.0M",
          "name": "[MktGen$_test YTD TARGET (copy)_1773010940773249028]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0014' \r\n            then [kpi_target_min]\r\n            end)}"
          }
        },
        "MktGen#_YTDgraph_OUTSTANDING": {
          "py/object": "models.Column.Column",
          "caption": "MktGen#_YTDgraph_OUTSTANDING",
          "datatype": "real",
          "default_format": "n#,##0,,.0M;-#,##0,,.0M",
          "name": "[MktGen$_test YTD TARGET (copy)_1773010940773568517]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0014' \r\n            then [kpi_target_outstanding]\r\n            end)}"
          }
        },
        "MktInf#_YTDgraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_YTDgraph_metric",
          "datatype": "real",
          "default_format": "n#,##0;-#,##0",
          "name": "[MktInf#_test (copy) (copy) (copy)_570831310659829760]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [kpi_metric_value]\r\nend)}"
          }
        },
        "MktInf#_YTDgraph_TARGET": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_YTDgraph_TARGET",
          "datatype": "real",
          "default_format": "n#,##0;-#,##0",
          "name": "[MktInf#_test YTD (copy)_1773010940767969280]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [kpi_target_max]\r\nend)}"
          }
        },
        "MktInf#_YTDgraph_OUTSTANDING": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_YTDgraph_OUTSTANDING",
          "datatype": "real",
          "default_format": "n#,##0;-#,##0",
          "name": "[MktInf#_test YTD MIN  (copy)_1773010940768251906]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [kpi_target_outstanding]\r\nend)}"
          }
        },
        "MktInf#_YTDgraph_MIN ": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_YTDgraph_MIN ",
          "datatype": "real",
          "default_format": "n#,##0;-#,##0",
          "name": "[MktInf#_test YTD TARGET (copy)_1773010940768157697]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [kpi_target_min]\r\nend)}"
          }
        },
        "MktInf#_mnthlygraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktInf#_mnthlygraph_metric",
          "datatype": "real",
          "name": "[MktInf$_test (copy) (copy)_5210101869776576516]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(\r\nif [kpi_id]='K0013'\r\nthen [monthly_kpi_metric_value]\r\nend)}"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[MktGen#_test (copy) (copy) (copy)_570831310660345857]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen#_test (copy) (copy) (copy)_570831310660345857]",
          "derivation": "Sum",
          "name": "[sum:MktGen#_test (copy) (copy) (copy)_570831310660345857:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktGen$_test (copy) (copy)_5210101869776977925]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test (copy) (copy)_5210101869776977925]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test (copy) (copy)_5210101869776977925:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktGen$_test YTD (copy)_1773010940772851715]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test YTD (copy)_1773010940772851715]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test YTD (copy)_1773010940772851715:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktGen$_test YTD TARGET (copy)_1773010940773249028]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test YTD TARGET (copy)_1773010940773249028]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test YTD TARGET (copy)_1773010940773249028:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktGen$_test YTD TARGET (copy)_1773010940773568517]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test YTD TARGET (copy)_1773010940773568517]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test YTD TARGET (copy)_1773010940773568517:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_test (copy) (copy) (copy)_570831310659829760]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_test (copy) (copy) (copy)_570831310659829760]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_test (copy) (copy) (copy)_570831310659829760:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_test YTD (copy)_1773010940767969280]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_test YTD (copy)_1773010940767969280]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_test YTD (copy)_1773010940767969280:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_test YTD MIN  (copy)_1773010940768251906]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_test YTD MIN  (copy)_1773010940768251906]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_test YTD MIN  (copy)_1773010940768251906:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf#_test YTD TARGET (copy)_1773010940768157697]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf#_test YTD TARGET (copy)_1773010940768157697]",
          "derivation": "Sum",
          "name": "[sum:MktInf#_test YTD TARGET (copy)_1773010940768157697:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf$_test (copy) (copy)_5210101869776576516]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf$_test (copy) (copy)_5210101869776576516]",
          "derivation": "Sum",
          "name": "[sum:MktInf$_test (copy) (copy)_5210101869776576516:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Marketing $ Graph (3)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing $ Graph (3)",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "MktGen$_mnthlygraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktGen$_mnthlygraph_metric",
          "datatype": "real",
          "name": "[MktGen$_test (copy 2)_2836704875289931777]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0016' then [monthly_kpi_metric_value] end)}"
          }
        },
        "MktInf$_mnthlygraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktInf$_mnthlygraph_metric",
          "datatype": "real",
          "name": "[MktInf$_test (copy 2)_2836704875289354240]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0015' then [monthly_kpi_metric_value] end)}"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[MktGen$_test (copy 2)_2836704875289931777]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test (copy 2)_2836704875289931777]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test (copy 2)_2836704875289931777:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf$_test (copy 2)_2836704875289354240]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf$_test (copy 2)_2836704875289354240]",
          "derivation": "Sum",
          "name": "[sum:MktInf$_test (copy 2)_2836704875289354240:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Marketing $ Graph YTD": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing $ Graph YTD",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "MktGen$_YTDgraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktGen$_YTDgraph_metric",
          "datatype": "real",
          "default_format": "n#,##0,,.0M;-#,##0,,.0M",
          "name": "[MktGen$_test (copy 2)_570831310665056259]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0016' \r\n            then [kpi_metric_value]\r\n            end)}"
          }
        },
        "MktInf$_YTDgraph_metric": {
          "py/object": "models.Column.Column",
          "caption": "MktInf$_YTDgraph_metric",
          "datatype": "real",
          "name": "[MktInf$_test (copy 2)_570831310664482818]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([Calculation_830632679161544704]):sum(if [kpi_id]='K0015' \r\n            then [kpi_metric_value]\r\n            end)}"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[MktGen$_test (copy 2)_570831310665056259]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktGen$_test (copy 2)_570831310665056259]",
          "derivation": "Sum",
          "name": "[sum:MktGen$_test (copy 2)_570831310665056259:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[MktInf$_test (copy 2)_570831310664482818]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[MktInf$_test (copy 2)_570831310664482818]",
          "derivation": "Sum",
          "name": "[sum:MktInf$_test (copy 2)_570831310664482818:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Marketing Generated Sales #": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing Generated Sales #",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0014\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Marketing Generated Sales $": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing Generated Sales $",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0016\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Marketing Influenced Sales #": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing Influenced Sales #",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0013\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Marketing Influenced Sales $": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Marketing Influenced Sales $",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "Attribute",
          "name": "[attr:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0015\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Net Cont Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Net Cont Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0025\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Net Cont Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Net Cont Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0025\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Net Cont Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Net Cont Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0025\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Net Contri Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Net Contri Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Net Contr Yellow Area 2": {
          "py/object": "models.Column.Column",
          "caption": "Net Contr Yellow Area 2",
          "datatype": "real",
          "name": "[Net Contr Red Area (copy)_449234082448539651]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[CapExp Green Max (copy)_1016969106670551041]- 10"
          }
        },
        "Net Contr Yellow Area 1": {
          "py/object": "models.Column.Column",
          "caption": "Net Contr Yellow Area 1",
          "datatype": "real",
          "name": "[Net Contr Yellow Area 2 (copy)_449234082450968580]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_target_max]-[kpi_target_min]"
          }
        },
        "Net Contr Red Area": {
          "py/object": "models.Column.Column",
          "caption": "Net Contr Red Area",
          "datatype": "real",
          "name": "[TargetforArea (with outstanding) (copy)_449234082445496320]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_target_min]"
          }
        },
        "Net Contr Green Area": {
          "py/object": "models.Column.Column",
          "caption": "Net Contr Green Area",
          "datatype": "real",
          "name": "[TargetforArea Net Contr (copy)_449234082447327234]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[CapExp Green Max (copy)_1016969106670551041]-[kpi_target_max]"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[CapExp Green Max (copy)_1016969106670551041]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[CapExp Green Max (copy)_1016969106670551041]",
          "derivation": "Sum",
          "name": "[sum:CapExp Green Max (copy)_1016969106670551041:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Kpi Metric Value (copy)_246572097899376641]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value (copy)_246572097899376641]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value (copy)_246572097899376641:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Net Contr Red Area (copy)_449234082448539651]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Net Contr Red Area (copy)_449234082448539651]",
          "derivation": "Sum",
          "name": "[sum:Net Contr Red Area (copy)_449234082448539651:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Net Contr Yellow Area 2 (copy)_449234082450968580]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Net Contr Yellow Area 2 (copy)_449234082450968580]",
          "derivation": "Sum",
          "name": "[sum:Net Contr Yellow Area 2 (copy)_449234082450968580:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (with outstanding) (copy)_449234082445496320]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (with outstanding) (copy)_449234082445496320]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (with outstanding) (copy)_449234082445496320:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea Net Contr (copy)_449234082447327234]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea Net Contr (copy)_449234082447327234]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea Net Contr (copy)_449234082447327234:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0025\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Net Contribution": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Net Contribution",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0025\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Bsns (ACV) Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Bsns (ACV) Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0028\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Bsns (ACV) Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Bsns (ACV) Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0028\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Bsns (ACV) Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Bsns (ACV) Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0028\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Bsns ACV Graph Monthly": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Bsns ACV Graph Monthly",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Color monthly metrics GRAPH": {
          "py/object": "models.Column.Column",
          "caption": "Color monthly metrics GRAPH",
          "datatype": "string",
          "name": "[Color (copy)_1346576350710231045]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Backwards Color Group]='KPIBC' \r\nthen if [monthly_kpi_metric_value]<= [monthly_kpi_target_outstanding] then 'dark green'\r\n    ELSEIF  [monthly_kpi_metric_value]<=[monthly_kpi_target_max] then 'green'\r\n    ELSEIF [monthly_kpi_metric_value]<[monthly_kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\nELSEIF [monthly_kpi_metric_value]>=[monthly_kpi_target_outstanding] then 'dark green'\r\nELSEIF  [monthly_kpi_metric_value]>=[monthly_kpi_target_max] then 'green'\r\n    ELSEIF [monthly_kpi_metric_value]>[monthly_kpi_target_min] then 'yellow'\r\n    else 'red'\r\n\r\nEND"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color (copy)_1346576350710231045]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color (copy)_1346576350710231045]",
          "derivation": "None",
          "name": "[none:Color (copy)_1346576350710231045:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0028\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "New Bsns ACV Graph area": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Bsns ACV Graph area",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        },
        "federated.1pb2as311sw84e13u5qz60192nfm": {
          "py/object": "models.DataSource.DataSource",
          "caption": "stg_churn_parent_product",
          "name": "federated.1pb2as311sw84e13u5qz60192nfm"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Kpi Metric Value (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value (copy)",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_1346576350713745414]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value]"
          }
        },
        "OutstandingforArea ": {
          "py/object": "models.Column.Column",
          "caption": "OutstandingforArea ",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([kpi_id]) :max([kpi_target_outstanding])} - [kpi_target_outstanding]"
          }
        },
        "TargetforArea (with outstanding)": {
          "py/object": "models.Column.Column",
          "caption": "TargetforArea (with outstanding)",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_outstanding]>[kpi_target_max] then [kpi_target_outstanding]-([kpi_target_max]//+1\r\n)\r\nelse 0 END"
          }
        },
        "YellowforArea K0028": {
          "py/object": "models.Column.Column",
          "caption": "YellowforArea K0028",
          "datatype": "real",
          "name": "[YellowforArea (copy)_517632529419689984]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_max]>[kpi_target_min] then [kpi_target_max]-([kpi_target_min]+.1)\r\nelse 0 END"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Kpi Metric Value (copy)_1346576350713745414]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value (copy)_1346576350713745414]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value (copy)_1346576350713745414:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998546128898]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998546128898:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998547259395]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998547259395:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[YellowforArea (copy)_517632529419689984]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[YellowforArea (copy)_517632529419689984]",
          "derivation": "Sum",
          "name": "[sum:YellowforArea (copy)_517632529419689984:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0028\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "New Business (ACV)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Business (ACV)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0028\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Opportunities": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Opportunities",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0007\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Opportunities Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Opportunities Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0007\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Opportunities Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Opportunities Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0007\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "New Opportunities Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "New Opportunities Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0007\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "PR Table": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "PR Table",
      "data_sources": {
        "federated.06kco84062piu819yxlb00lxfmwo": {
          "py/object": "models.DataSource.DataSource",
          "caption": "price_realization_detail",
          "name": "federated.06kco84062piu819yxlb00lxfmwo"
        }
      },
      "columns": {
        "Reporting Month MonYr": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month MonYr",
          "datatype": "string",
          "name": "[Calculation_2334553484921331712]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "left(datename('month',[Calculation_587438303138983937]),3) + ' '+datename('year',[Calculation_587438303138983937])"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[Calculation_587438303138983937]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "PR": {
          "py/object": "models.Column.Column",
          "caption": "PR",
          "datatype": "real",
          "name": "[Calculation_587438303377915910]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "[acv_net_diff]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[acv_net_diff]",
          "role": "measure",
          "type": "quantitative"
        },
        "ACV": {
          "py/object": "models.Column.Column",
          "caption": "ACV",
          "datatype": "real",
          "name": "[annual_contract_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[contract_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[contract_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_industry]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_industry]",
          "role": "dimension",
          "type": "nominal"
        },
        "Previous ACV": {
          "py/object": "models.Column.Column",
          "caption": "Previous ACV",
          "datatype": "real",
          "name": "[pre_annual_contract_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Product": {
          "py/object": "models.Column.Column",
          "caption": "Product",
          "datatype": "string",
          "name": "[pro_sub_group (copy)_2334553484928655361]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[pro_sub_group]"
          }
        },
        "[pro_sub_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[pro_sub_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "product_group (copy)": {
          "py/object": "models.Column.Column",
          "caption": "product_group (copy)",
          "datatype": "string",
          "name": "[product_group (copy)_587438303141892100]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[product_group]"
          }
        },
        "[product_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[product_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "Renewal Status": {
          "py/object": "models.Column.Column",
          "caption": "Renewal Status",
          "datatype": "string",
          "name": "[renewal_status (copy)_587438303141834755]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "trim(replace([renewal_status], [product_group (copy)_587438303141892100],''))"
          }
        },
        "[renewal_status]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[renewal_status]",
          "role": "dimension",
          "type": "nominal"
        },
        "Sold To City": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Sold To City",
          "datatype": "string",
          "name": "[sold_to_city]",
          "role": "dimension",
          "semantic_role": "[City].[Name]",
          "type": "nominal"
        },
        "Sold To Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Sold To Country",
          "datatype": "string",
          "name": "[sold_to_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "Sold To Name": {
          "py/object": "models.Column.Column",
          "caption": "Sold To Name",
          "datatype": "string",
          "name": "[sold_to_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "Sold To State": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Sold To State",
          "datatype": "string",
          "name": "[sold_to_state]",
          "role": "dimension",
          "semantic_role": "[State].[Name]",
          "type": "nominal"
        },
        "[strategic_account_flag]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategic_account_flag]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[Calculation_587438303138983937]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303138983937]",
          "derivation": "MY",
          "name": "[my:Calculation_587438303138983937:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_2334553484921331712]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_2334553484921331712]",
          "derivation": "None",
          "name": "[none:Calculation_2334553484921331712:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[contract_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[contract_size]",
          "derivation": "None",
          "name": "[none:contract_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_industry]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_industry]",
          "derivation": "None",
          "name": "[none:parent_industry:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[pro_sub_group (copy)_2334553484928655361]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pro_sub_group (copy)_2334553484928655361]",
          "derivation": "None",
          "name": "[none:pro_sub_group (copy)_2334553484928655361:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[pro_sub_group]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pro_sub_group]",
          "derivation": "None",
          "name": "[none:pro_sub_group:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[renewal_status (copy)_587438303141834755]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[renewal_status (copy)_587438303141834755]",
          "derivation": "None",
          "name": "[none:renewal_status (copy)_587438303141834755:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[sold_to_city]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[sold_to_city]",
          "derivation": "None",
          "name": "[none:sold_to_city:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[sold_to_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[sold_to_country]",
          "derivation": "None",
          "name": "[none:sold_to_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[sold_to_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[sold_to_name]",
          "derivation": "None",
          "name": "[none:sold_to_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[sold_to_state]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[sold_to_state]",
          "derivation": "None",
          "name": "[none:sold_to_state:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategic_account_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategic_account_flag]",
          "derivation": "None",
          "name": "[none:strategic_account_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[annual_contract_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[annual_contract_value]",
          "derivation": "Sum",
          "name": "[sum:annual_contract_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[pre_annual_contract_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pre_annual_contract_value]",
          "derivation": "Sum",
          "name": "[sum:pre_annual_contract_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_587438303377915910]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303377915910]",
          "derivation": "User",
          "name": "[usr:Calculation_587438303377915910:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[my:Calculation_587438303138983937:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_587438303138983937:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:contract_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:contract_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:parent_industry:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_industry:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:pro_sub_group:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:pro_sub_group:nk]",
              "member": "\"SF COMMERCIAL\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:renewal_status (copy)_587438303141834755:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:renewal_status (copy)_587438303141834755:nk]",
              "member": "\"RENEW\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:sold_to_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:sold_to_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:strategic_account_flag:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:strategic_account_flag:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "PR by Product Hier": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "PR by Product Hier",
      "data_sources": {
        "federated.06kco84062piu819yxlb00lxfmwo": {
          "py/object": "models.DataSource.DataSource",
          "caption": "price_realization_detail",
          "name": "federated.06kco84062piu819yxlb00lxfmwo"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[Calculation_587438303138983937]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left([calmonth],4)),\r\nint(mid([calmonth],5,2)),\r\nint(right([calmonth],2))\r\n)"
          }
        },
        "SUM([acv_net_diff])/sum([Previous ACV])": {
          "py/object": "models.Column.Column",
          "caption": "SUM([acv_net_diff])/sum([Previous ACV])",
          "datatype": "real",
          "name": "[Calculation_587438303144382469]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "countd_parent_a": {
          "py/object": "models.Column.Column",
          "caption": "countd_parent_a",
          "datatype": "integer",
          "name": "[Calculation_587438303420690448]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "COUNTD([parent_a])"
          }
        },
        "PR (copy)": {
          "py/object": "models.Column.Column",
          "caption": "PR (copy)",
          "datatype": "real",
          "name": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "[acv_net_diff]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[acv_net_diff]",
          "role": "measure",
          "type": "quantitative"
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[contract_size]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[contract_size]",
          "role": "dimension",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[customer_market]",
          "role": "dimension",
          "type": "nominal"
        },
        "[parent_a]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_a]",
          "role": "dimension",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "datatype": "string",
          "name": "[parent_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[parent_industry]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[parent_industry]",
          "role": "dimension",
          "type": "nominal"
        },
        "Previous ACV": {
          "py/object": "models.Column.Column",
          "caption": "Previous ACV",
          "datatype": "real",
          "name": "[pre_annual_contract_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "pro_sub_group replaced": {
          "py/object": "models.Column.Column",
          "caption": "pro_sub_group replaced",
          "datatype": "string",
          "name": "[pro_sub_group (copy)_587438303141797890]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "replace([pro_sub_group],case [product_group] when 'SCIFINDER' then 'SF' else [product_group] end,'')"
          }
        },
        "[pro_sub_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[pro_sub_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "product_group (copy)": {
          "py/object": "models.Column.Column",
          "caption": "product_group (copy)",
          "datatype": "string",
          "name": "[product_group (copy)_587438303141892100]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[product_group]"
          }
        },
        "[product_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[product_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "Renewal Status": {
          "py/object": "models.Column.Column",
          "caption": "Renewal Status",
          "datatype": "string",
          "name": "[renewal_status (copy)_587438303141834755]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "trim(replace([renewal_status], [product_group (copy)_587438303141892100],''))"
          }
        },
        "[renewal_status]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[renewal_status]",
          "role": "dimension",
          "type": "nominal"
        },
        "Sold To Country": {
          "py/object": "models.Column.Column",
          "aggregation": "None",
          "caption": "Sold To Country",
          "datatype": "string",
          "name": "[sold_to_country]",
          "role": "dimension",
          "semantic_role": "[Country].[ISO3166_2]",
          "type": "nominal"
        },
        "[strategic_account_flag]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategic_account_flag]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[pro_sub_group]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pro_sub_group]",
          "derivation": "None",
          "name": "[none:pro_sub_group:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_group]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_group]",
          "derivation": "None",
          "name": "[none:product_group:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_587438303138983937]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303138983937]",
          "derivation": "MY",
          "name": "[my:Calculation_587438303138983937:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[contract_size]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[contract_size]",
          "derivation": "None",
          "name": "[none:contract_size:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[customer_market]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[customer_market]",
          "derivation": "None",
          "name": "[none:customer_market:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_country]",
          "derivation": "None",
          "name": "[none:parent_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[parent_industry]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[parent_industry]",
          "derivation": "None",
          "name": "[none:parent_industry:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[pro_sub_group (copy)_587438303141797890]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pro_sub_group (copy)_587438303141797890]",
          "derivation": "None",
          "name": "[none:pro_sub_group (copy)_587438303141797890:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_group (copy)_587438303141892100]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_group (copy)_587438303141892100]",
          "derivation": "None",
          "name": "[none:product_group (copy)_587438303141892100:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[renewal_status (copy)_587438303141834755]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[renewal_status (copy)_587438303141834755]",
          "derivation": "None",
          "name": "[none:renewal_status (copy)_587438303141834755:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[sold_to_country]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[sold_to_country]",
          "derivation": "None",
          "name": "[none:sold_to_country:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategic_account_flag]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategic_account_flag]",
          "derivation": "None",
          "name": "[none:strategic_account_flag:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_587438303144382469]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303144382469]",
          "derivation": "User",
          "name": "[usr:Calculation_587438303144382469:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_587438303420690448]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303420690448]",
          "derivation": "User",
          "name": "[usr:Calculation_587438303420690448:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524]",
          "derivation": "User",
          "name": "[usr:SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[attr:pro_sub_group:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[attr:pro_sub_group:nk]"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[attr:product_group:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[attr:product_group:nk]"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[my:Calculation_587438303138983937:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[my:Calculation_587438303138983937:ok]",
              "member": "202008"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:contract_size:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:contract_size:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:customer_market:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:customer_market:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:parent_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:parent_industry:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:parent_industry:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:pro_sub_group:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:pro_sub_group:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:product_group:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:product_group:nk]"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:renewal_status (copy)_587438303141834755:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:renewal_status (copy)_587438303141834755:nk]"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:sold_to_country:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:sold_to_country:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[none:strategic_account_flag:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "level-members",
              "level": "[none:strategic_account_flag:nk]",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.06kco84062piu819yxlb00lxfmwo].[usr:Calculation_587438303420690448:qk]",
          "group_filters": []
        }
      ]
    },
    "PR by Product Hier (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "PR by Product Hier (2)",
      "data_sources": {
        "federated.06kco84062piu819yxlb00lxfmwo": {
          "py/object": "models.DataSource.DataSource",
          "caption": "price_realization_detail",
          "name": "federated.06kco84062piu819yxlb00lxfmwo"
        }
      },
      "columns": {
        "SUM([acv_net_diff])/sum([Previous ACV])": {
          "py/object": "models.Column.Column",
          "caption": "SUM([acv_net_diff])/sum([Previous ACV])",
          "datatype": "real",
          "name": "[Calculation_587438303144382469]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "PR (copy)": {
          "py/object": "models.Column.Column",
          "caption": "PR (copy)",
          "datatype": "real",
          "name": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "SUM([acv_net_diff])/sum([pre_annual_contract_value])"
          }
        },
        "[acv_net_diff]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[acv_net_diff]",
          "role": "measure",
          "type": "quantitative"
        },
        "Previous ACV": {
          "py/object": "models.Column.Column",
          "caption": "Previous ACV",
          "datatype": "real",
          "name": "[pre_annual_contract_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[pro_sub_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[pro_sub_group]",
          "role": "dimension",
          "type": "nominal"
        },
        "product_group (copy)": {
          "py/object": "models.Column.Column",
          "caption": "product_group (copy)",
          "datatype": "string",
          "name": "[product_group (copy)_587438303141892100]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[product_group]"
          }
        },
        "[product_group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[product_group]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[pro_sub_group]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[pro_sub_group]",
          "derivation": "Attribute",
          "name": "[attr:pro_sub_group:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_group]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_group]",
          "derivation": "None",
          "name": "[none:product_group:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_group (copy)_587438303141892100]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_group (copy)_587438303141892100]",
          "derivation": "None",
          "name": "[none:product_group (copy)_587438303141892100:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_587438303144382469]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_587438303144382469]",
          "derivation": "User",
          "name": "[usr:Calculation_587438303144382469:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524]",
          "derivation": "User",
          "name": "[usr:SUM([acv_net_diff]])/sum([pre_annual_contract_value]]) (copy)_587438303408832524:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": []
    },
    "Price Realization": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Price Realization",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0027\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Price Realization Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Price Realization Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0027\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Price Realization Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Price Realization Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0027\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Price Realization Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Price Realization Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0027\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Price Realization Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Price Realization Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[my:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0027\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Price Realization Table": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Price Realization Table",
      "data_sources": {
        "federated.1lr7nfm1rx5vi112qzxe31k02o27": {
          "py/object": "models.DataSource.DataSource",
          "caption": "pr_churn_product",
          "name": "federated.1lr7nfm1rx5vi112qzxe31k02o27"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "name": "[Calculation_466685514769997827]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([calmonth]),4)),\r\nint(mid(str([calmonth]),5,2)),\r\nint(right(str([calmonth]),2))\r\n)"
          }
        },
        "[calmonth]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[calmonth]",
          "role": "dimension",
          "type": "nominal"
        },
        "[esd_tile]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[esd_tile]",
          "role": "dimension",
          "type": "nominal"
        },
        "Product": {
          "py/object": "models.Column.Column",
          "caption": "Product",
          "datatype": "string",
          "name": "[product_grp_text]",
          "role": "dimension",
          "type": "nominal",
          "aliases": {
            "\"SCIFINDER\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"SCIFINDER\"",
              "value": "SCIFINDER OVERALL "
            },
            "\"SCIFINDER ACADEMIC\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"SCIFINDER ACADEMIC\"",
              "value": "- SCIFINDER ACADEMIC"
            },
            "\"SCIFINDER COMMERCIAL\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"SCIFINDER COMMERCIAL\"",
              "value": "- SCIFINDER COMMERCIAL"
            },
            "\"STN C CAS\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"STN C CAS\"",
              "value": "STN: CAS & STNC FILES"
            },
            "\"STN CAS FORMULATIONS\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"STN CAS FORMULATIONS\"",
              "value": "STN: CAS FORMULATIONS"
            }
          }
        },
        "[rate]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[rate]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_466685514769997827]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_466685514769997827]",
          "derivation": "Year",
          "name": "[yr:Calculation_466685514769997827:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[esd_tile]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[esd_tile]",
          "derivation": "None",
          "name": "[none:esd_tile:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[product_grp_text]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[product_grp_text]",
          "derivation": "None",
          "name": "[none:product_grp_text:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[rate]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[rate]",
          "derivation": "Sum",
          "name": "[sum:rate:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1lr7nfm1rx5vi112qzxe31k02o27].[none:esd_tile:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:esd_tile:nk]",
              "member": "\"Price Realization\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1lr7nfm1rx5vi112qzxe31k02o27].[none:product_grp_text:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "except",
              "ui_domain": "relevant",
              "ui_enumeration": "exclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1lr7nfm1rx5vi112qzxe31k02o27].[yr:Calculation_466685514769997827:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_466685514769997827:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Product Pipeline Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Product Pipeline Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Revenue": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Revenue",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0024\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Revenue Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Revenue Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0024\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Revenue Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Revenue Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0024\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Revenue Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Revenue Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0024\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Revenue Forecast Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Revenue Forecast Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Kpi Metric Value NetContr (copy)_246572098170482690]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value NetContr (copy)_246572098170482690:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0024\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Roadmap Delivery Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Roadmap Delivery Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0004\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Roadmap Delivery Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Roadmap Delivery Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0004\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Roadmap Delivery Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Roadmap Delivery Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0004\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Roadmap Delivery Graph": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Roadmap Delivery Graph",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937399463942]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937399463942]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color for history status ": {
          "py/object": "models.Column.Column",
          "caption": "Color for history status ",
          "datatype": "string",
          "name": "[Color (copy)_1527564737022660608]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([metric_expiration_date_key]) then 'grey'\r\nelse [Color with Outstanding (copy)_614459937399463942] END"
          }
        },
        "Color Status Text for graph": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text for graph",
          "datatype": "string",
          "name": "[Color Status Text (copy)_1527564737045377025]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color (copy)_1527564737022660608]='grey' then ' ' \r\nELSEIF [Color (copy)_1527564737022660608]='orange' then 'No Data Available'\r\nelse [Calculation_632192816620109824] END"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Metric Expiration Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Expiration Date Key",
          "datatype": "integer",
          "name": "[metric_expiration_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color (copy)_1527564737022660608]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color (copy)_1527564737022660608]",
          "derivation": "None",
          "name": "[none:Color (copy)_1527564737022660608:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Color Status Text (copy)_1527564737045377025]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color Status Text (copy)_1527564737045377025]",
          "derivation": "None",
          "name": "[none:Color Status Text (copy)_1527564737045377025:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0004\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Roadmap Delivery Status": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Roadmap Delivery Status",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Status On Track": {
          "py/object": "models.Column.Column",
          "caption": "Status On Track",
          "datatype": "string",
          "name": "[Calculation_1230327149247516679]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'On Track' then [Calculation_632192816620109824] END"
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Status Off Track ": {
          "py/object": "models.Column.Column",
          "caption": "Status Off Track ",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149247733768]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'Off Track' then [Calculation_632192816620109824] END"
          }
        },
        "Status At Risk": {
          "py/object": "models.Column.Column",
          "caption": "Status At Risk",
          "datatype": "string",
          "name": "[Status On Track (copy)_1230327149248634889]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "case [Calculation_632192816620109824] when 'At Risk' then [Calculation_632192816620109824] END"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_1230327149247516679]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1230327149247516679]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_1230327149247516679:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_632192816620109824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_632192816620109824]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_632192816620109824:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Status On Track (copy)_1230327149247733768]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149247733768]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149247733768:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Status On Track (copy)_1230327149248634889]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Status On Track (copy)_1230327149248634889]",
          "derivation": "Attribute",
          "name": "[attr:Status On Track (copy)_1230327149248634889:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0004\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "STNext Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "STNext Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0005\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "SciFinder": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "SciFinder",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Color Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Color Status Text",
          "datatype": "string",
          "name": "[Calculation_632192816620109824]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "If [Color with Outstanding (copy)_614459937384169477]='red' then 'Off Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='green' then 'On Track'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'At Risk'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'Metric TBD'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]= 'dark green' then 'Outstanding'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_632192816620109824]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_632192816620109824]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_632192816620109824:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "SciFinder Detail Header ": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "SciFinder Detail Header ",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "SciFinder Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "SciFinder Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "SciFinder Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "SciFinder Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "SciFinder Graph Area": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "SciFinder Graph Area",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "sci_ytd_pct": {
          "py/object": "models.Column.Column",
          "caption": "sci_ytd_pct",
          "datatype": "real",
          "default_format": "n#,##0\"%\";-#,##0\"%\"",
          "name": "[Calculation_1035546487288537088]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([sci_renewed_ytd]/[sci_avail_to_renew_ytd]*100,0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "YellowforArea": {
          "py/object": "models.Column.Column",
          "caption": "YellowforArea",
          "datatype": "real",
          "name": "[Kpi Target Max (copy)_1527564737371901957]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_max]>[kpi_target_min] then [kpi_target_max]-([kpi_target_min]//+1 //changed this when added outstanding (not sure why +1?)\r\n)\r\nelse 0 END"
          }
        },
        "OutstandingforArea  SFonly": {
          "py/object": "models.Column.Column",
          "caption": "OutstandingforArea  SFonly",
          "datatype": "real",
          "name": "[OutstandingforArea  (copy)_1346576350646669316]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([kpi_id]) :max(100)} - [kpi_target_outstanding]"
          }
        },
        "TargetforArea (with outstanding)": {
          "py/object": "models.Column.Column",
          "caption": "TargetforArea (with outstanding)",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_outstanding]>[kpi_target_max] then [kpi_target_outstanding]-([kpi_target_max]//+1\r\n)\r\nelse 0 END"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[sci_avail_to_renew_ytd]": {
          "py/object": "models.Column.Column",
          "datatype": "integer",
          "name": "[sci_avail_to_renew_ytd]",
          "role": "measure",
          "type": "quantitative"
        },
        "[sci_renewed_ytd]": {
          "py/object": "models.Column.Column",
          "datatype": "integer",
          "name": "[sci_renewed_ytd]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1035546487288537088]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1035546487288537088]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1035546487288537088:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Kpi Target Max (copy)_1527564737371901957]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Target Max (copy)_1527564737371901957]",
          "derivation": "Sum",
          "name": "[sum:Kpi Target Max (copy)_1527564737371901957:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[OutstandingforArea  (copy)_1346576350646669316]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[OutstandingforArea  (copy)_1346576350646669316]",
          "derivation": "Sum",
          "name": "[sum:OutstandingforArea  (copy)_1346576350646669316:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998547259395]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998547259395:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "SciFinder Graph monthly": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "SciFinder Graph monthly",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "sci_ytd_pct": {
          "py/object": "models.Column.Column",
          "caption": "sci_ytd_pct",
          "datatype": "real",
          "default_format": "n#,##0\"%\";-#,##0\"%\"",
          "name": "[Calculation_1035546487288537088]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([sci_renewed_ytd]/[sci_avail_to_renew_ytd]*100,0)"
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[sci_avail_to_renew_ytd]": {
          "py/object": "models.Column.Column",
          "datatype": "integer",
          "name": "[sci_avail_to_renew_ytd]",
          "role": "measure",
          "type": "quantitative"
        },
        "[sci_renewed_ytd]": {
          "py/object": "models.Column.Column",
          "datatype": "integer",
          "name": "[sci_renewed_ytd]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1035546487288537088]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1035546487288537088]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1035546487288537088:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0001\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Services Rev Graph area": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Rev Graph area",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_4067031998566608900]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value (copy)": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value (copy)",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_1346576350713745414]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value]"
          }
        },
        "YellowforArea": {
          "py/object": "models.Column.Column",
          "caption": "YellowforArea",
          "datatype": "real",
          "name": "[Kpi Target Max (copy)_1527564737371901957]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_max]>[kpi_target_min] then [kpi_target_max]-([kpi_target_min]//+1 //changed this when added outstanding (not sure why +1?)\r\n)\r\nelse 0 END"
          }
        },
        "OutstandingforArea ": {
          "py/object": "models.Column.Column",
          "caption": "OutstandingforArea ",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "{fixed([kpi_id]) :max([kpi_target_outstanding])} - [kpi_target_outstanding]"
          }
        },
        "TargetforArea (with outstanding)": {
          "py/object": "models.Column.Column",
          "caption": "TargetforArea (with outstanding)",
          "datatype": "real",
          "name": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [kpi_target_outstanding]>[kpi_target_max] then [kpi_target_outstanding]-([kpi_target_max]//+1\r\n)\r\nelse 0 END"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_4067031998566608900]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_4067031998566608900]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_4067031998566608900:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Kpi Metric Value (copy)_1346576350713745414]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Metric Value (copy)_1346576350713745414]",
          "derivation": "Sum",
          "name": "[sum:Kpi Metric Value (copy)_1346576350713745414:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Kpi Target Max (copy)_1527564737371901957]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Kpi Target Max (copy)_1527564737371901957]",
          "derivation": "Sum",
          "name": "[sum:Kpi Target Max (copy)_1527564737371901957:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998546128898]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998546128898]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998546128898:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[TargetforArea (copy) (copy)_4067031998547259395]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[TargetforArea (copy) (copy)_4067031998547259395]",
          "derivation": "Sum",
          "name": "[sum:TargetforArea (copy) (copy)_4067031998547259395:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0006\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Services Revenue": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0006\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Services Revenue Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0006\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Services Revenue Forecast": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue Forecast",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_1773010940825149446]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_1773010940825149446]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_1773010940825149446]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_1773010940825149446:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0030\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Services Revenue Forecast Detail Header (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue Forecast Detail Header (2)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_1773010940825149446]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_1773010940825149446]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_1773010940825149446]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_1773010940825149446:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0030\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Services Revenue Forecast Detail Square (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue Forecast Detail Square (2)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218 1]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_1773010940825149446]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218 1]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218 1]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218 1:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_1773010940825149446]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_1773010940825149446]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_1773010940825149446:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0030\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Services Revenue Forecast Details Link (2)": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue Forecast Details Link (2)",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0030\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Services Revenue Graph Monthly": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Services Revenue Graph Monthly",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "Format Switch Metric": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric",
          "datatype": "string",
          "name": "[Calculation_175921893972873218]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Color monthly metrics GRAPH": {
          "py/object": "models.Column.Column",
          "caption": "Color monthly metrics GRAPH",
          "datatype": "string",
          "name": "[Color (copy)_1346576350710231045]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Backwards Color Group]='KPIBC' \r\nthen if [monthly_kpi_metric_value]<= [monthly_kpi_target_outstanding] then 'dark green'\r\n    ELSEIF  [monthly_kpi_metric_value]<=[monthly_kpi_target_max] then 'green'\r\n    ELSEIF [monthly_kpi_metric_value]<[monthly_kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\nELSEIF [monthly_kpi_metric_value]>=[monthly_kpi_target_outstanding] then 'dark green'\r\nELSEIF  [monthly_kpi_metric_value]>=[monthly_kpi_target_max] then 'green'\r\n    ELSEIF [monthly_kpi_metric_value]>[monthly_kpi_target_min] then 'yellow'\r\n    else 'red'\r\n\r\nEND"
          }
        },
        "Format Switch Metric Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Metric Monthly",
          "datatype": "string",
          "name": "[Format Switch Metric (copy)_5305240406968721411]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_metric_value]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_metric_value]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_metric_value]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_metric_value]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_metric_value]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min",
          "datatype": "string",
          "name": "[Format Switch Target (copy)_1527564737094438915]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max Monthly",
          "datatype": "string",
          "name": "[Format Switch Target Max (copy)_5305240406969278468]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Outstanding Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Outstanding Monthly",
          "datatype": "string",
          "name": "[Format Switch Target Max Monthly (copy)_1346576349329256449]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_target_outstanding]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_target_outstanding]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_target_outstanding]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_target_outstanding]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_target_outstanding]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Min Monthly": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Min Monthly",
          "datatype": "string",
          "name": "[Format Switch Target Min (copy)_5305240406969466885]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [monthly_kpi_target_min]<1000000 \r\n//1=1 \r\nthen '$'+str(round([monthly_kpi_target_min]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([monthly_kpi_target_min]/1000000,1)*10\r\n        )\r\n    ,len(str(round([monthly_kpi_target_min]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([monthly_kpi_target_min]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "Format Switch Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Format Switch Target Max",
          "datatype": "string",
          "name": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "IF [kpi_target_max]<1000000 \r\n//1=1 \r\nthen '$'+str(round([kpi_target_max]/1000,0))+'K'\r\nelse '$'+ //glitch in tableau with using str with rounding, so need below\r\nleft(\r\n    str(\r\n        round([kpi_target_max]/1000000,1)*10\r\n        )\r\n    ,len(str(round([kpi_target_max]/1000000,1)*10)\r\n        )-1\r\n    )\r\n+'.'+\r\nright(str(round([kpi_target_max]/1000000,1)*10),1)\r\n+'M'\r\nEND"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_175921893972873218]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_175921893972873218]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_175921893972873218:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Format Switch Metric (copy)_5305240406968721411]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Metric (copy)_5305240406968721411]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Metric (copy)_5305240406968721411:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target (copy)_1527564737094438915]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target (copy)_1527564737094438915]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target (copy)_1527564737094438915:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max (copy)_5305240406969278468]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max (copy)_5305240406969278468]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max (copy)_5305240406969278468:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Max Monthly (copy)_1346576349329256449]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Max Monthly (copy)_1346576349329256449]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Max Monthly (copy)_1346576349329256449:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Format Switch Target Min (copy)_5305240406969466885]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Format Switch Target Min (copy)_5305240406969466885]",
          "derivation": "Attribute",
          "name": "[attr:Format Switch Target Min (copy)_5305240406969466885:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[KPI Metric Value Format Switch 0006 (copy)_1527564737086193666]",
          "derivation": "Attribute",
          "name": "[attr:KPI Metric Value Format Switch 0006 (copy)_1527564737086193666:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color (copy)_1346576350710231045]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color (copy)_1346576350710231045]",
          "derivation": "None",
          "name": "[none:Color (copy)_1346576350710231045:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0006\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "Strategic Alliance Deal Progression": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Strategic Alliance Deal Progression",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0002\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Strategic Alliance Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Strategic Alliance Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0002\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Strategic Alliance Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Strategic Alliance Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0002\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Strategic Alliance Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Strategic Alliance Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0002\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Strategic Alliance Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Strategic Alliance Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[monthly_kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[monthly_kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[monthly_kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:monthly_kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0002\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Talent Management Heading": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Talent Management Heading",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Strategy Desc": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Desc",
          "datatype": "string",
          "name": "[strategy_desc]",
          "role": "dimension",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[strategy_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        }
      },
      "column_instances": {
        "[strategy_desc]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_desc]",
          "derivation": "Attribute",
          "name": "[attr:strategy_desc:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_id]",
          "derivation": "None",
          "name": "[none:strategy_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "None",
          "name": "[none:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:strategy_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:strategy_id:nk]",
              "member": "\"S007\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Time to Fill Roles": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Time to Fill Roles",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "str(SUM([Kpi Metric Value]))+' Days'": {
          "py/object": "models.Column.Column",
          "caption": "str(SUM([Kpi Metric Value]))+' Days'",
          "datatype": "string",
          "name": "[Calculation_568860953296465925]",
          "role": "measure",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "str(SUM([kpi_metric_value]))+' Days'"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[Calculation_568860953296465925]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_568860953296465925]",
          "derivation": "User",
          "name": "[usr:Calculation_568860953296465925:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0022\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Time to Fill Roles Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Time to Fill Roles Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0021\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Time to Fill Roles Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Time to Fill Roles Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0022\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "Time to Fill Roles Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "Time to Fill Roles Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0022\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "aSheet 170": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "aSheet 170",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Tooltip Text": {
          "py/object": "models.Column.Column",
          "caption": "Tooltip Text",
          "datatype": "string",
          "name": "[Calculation_568860953242808322]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "''"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_568860953242808322]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_568860953242808322]",
          "derivation": "None",
          "name": "[none:Calculation_568860953242808322:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[Tooltip (Color,Update Status Text,Kpi Title)]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "crossjoin",
              "ui_enumeration": "all",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "cNPS": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "cNPS",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0011\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "cNPS Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "cNPS Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0011\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "cNPS Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "cNPS Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0011\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "cNPS Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "cNPS Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0011\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "cNPS Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "cNPS Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0011\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "eNPS Graph History": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "eNPS Graph History",
      "data_sources": {
        "federated.1dqrfmf0a371j310dfdf0134utz5": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result_history (esd_dm.vw_summary_result_history)",
          "name": "federated.1dqrfmf0a371j310dfdf0134utz5"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "Reporting Month - month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month - month",
          "datatype": "datetime",
          "default_format": "*mmm",
          "name": "[Calculation_1293659043078250513]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "DATETRUNC('month',[Calculation_830632679161544704])"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.65"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.20"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "27.20"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "26.749999"
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937399463942]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          },
          "aliases": {
            "\"green\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"green\"",
              "value": "On Track"
            },
            "\"orange\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"orange\"",
              "value": " "
            },
            "\"red\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"red\"",
              "value": "Off Track"
            },
            "\"yellow\"": {
              "py/object": "models.Alias.Alias",
              "key": "\"yellow\"",
              "value": "At Risk"
            }
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_current_title]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_current_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Id": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Id",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Year",
          "name": "[yr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "Attribute",
          "name": "[attr:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1293659043078250513]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1293659043078250513]",
          "derivation": "None",
          "name": "[none:Calculation_1293659043078250513:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937399463942]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937399463942]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937399463942:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_current_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_current_title]",
          "derivation": "None",
          "name": "[none:kpi_current_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_outstanding]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_outstanding:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[:Measure Names]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "union",
              "op": "manual"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0023\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        },
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1dqrfmf0a371j310dfdf0134utz5].[yr:Calculation_830632679161544704:ok]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[yr:Calculation_830632679161544704:ok]",
              "member": "2020"
            }
          ]
        }
      ]
    },
    "nSTN Detail Header": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "nSTN Detail Header",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0005\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "nSTN Detail Square": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "nSTN Detail Square",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0005\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "nSTN Details Link": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "nSTN Details Link",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "Color KPI Detail Link": {
          "py/object": "models.Column.Column",
          "caption": "Color KPI Detail Link",
          "datatype": "string",
          "name": "[Calculation_534802476799909888]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Color with Outstanding (copy)_614459937384169477]='red' then 'dark red'\r\nelseif [Color with Outstanding (copy)_614459937384169477]='green' then 'dark green'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='yellow' then 'dark yellow'\r\nELSEIF [Color with Outstanding (copy)_614459937384169477]='orange' then 'dark orange'\r\nelse 'very dark green'\r\nEND"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        }
      },
      "column_instances": {
        "[Calculation_534802476799909888]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_534802476799909888]",
          "derivation": "None",
          "name": "[none:Calculation_534802476799909888:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0005\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    },
    "nSTN Migration to STNext": {
      "py/object": "models.Worksheet.Worksheet",
      "name": "nSTN Migration to STNext",
      "data_sources": {
        "federated.1w57z7b0xcsy1l1750ijj1twkqbp": {
          "py/object": "models.DataSource.DataSource",
          "caption": "vw_summary_result (esd_dm.vw_summary_result)",
          "name": "federated.1w57z7b0xcsy1l1750ijj1twkqbp"
        }
      },
      "columns": {
        "[Backwards Color Group]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[Backwards Color Group]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "column": "[kpi_id]",
            "new_bin": "true",
            "bin": {
              "py/object": "models.Bin.Bin",
              "value": "\"KPIBC\"",
              "bin_values": [
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0021\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0022\""
                },
                {
                  "py/object": "models.BinValue.BinValue",
                  "value": "\"K0029\""
                }
              ]
            }
          }
        },
        "diff_kpi_metric_value": {
          "py/object": "models.Column.Column",
          "caption": "diff_kpi_metric_value",
          "datatype": "real",
          "name": "[Calculation_1352205812740988931]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "[kpi_metric_value (Custom SQL Query)]-[kpi_metric_value_lm]"
          }
        },
        "CapExp Green Min": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Min",
          "datatype": "real",
          "name": "[Calculation_329044261814546433]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.65\r\n23.95"
          }
        },
        "kpi metric value SF": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value SF",
          "datatype": "real",
          "name": "[Calculation_614459937039974400]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Reporting Month": {
          "py/object": "models.Column.Column",
          "caption": "Reporting Month",
          "datatype": "date",
          "default_format": "*mmm yyyy",
          "name": "[Calculation_830632679161544704]",
          "role": "dimension",
          "type": "ordinal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "MAKEDATE(\r\nint(left(str([metric_effective_date_key]),4)),\r\nint(mid(str([metric_effective_date_key]),5,2)),\r\nint(right(str([metric_effective_date_key]),2))\r\n)"
          }
        },
        "NetContr Green Max ": {
          "py/object": "models.Column.Column",
          "caption": "NetContr Green Max ",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_1016969106670551041]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "67.0"
          }
        },
        "CapExp Red Less Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Less Than",
          "datatype": "real",
          "name": "[CapExp Green Max (copy)_329044261819965444]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.20\r\n23.5"
          }
        },
        "CapExp Red Greater Than": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Red Greater Than",
          "datatype": "real",
          "name": "[CapExp Red Less Than (copy)_329044261820370949]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//27.20\r\n24.5"
          }
        },
        "CapExp Green Max": {
          "py/object": "models.Column.Column",
          "caption": "CapExp Green Max",
          "datatype": "real",
          "name": "[Capital Expenditures Green Min (copy)_329044261815382018]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//26.749999\r\n24.04 //displaying metric with 1 decimal pt, so ensuring that it rounds to 24.0 so # will match the color of tile (green).  \r\n//Rounding to 24.1 will look like it should be yellow."
          }
        },
        "Color": {
          "py/object": "models.Column.Column",
          "caption": "Color",
          "datatype": "string",
          "name": "[Color with Outstanding (copy)_614459937384169477]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if isnull([kpi_metric_value]) then 'orange'\r\n\r\nELSEIF [kpi_id]='K0015' or kpi_id='K0016' then 'green'\r\n\r\n//STNext: target max used for last month metric; target min used for 2 months ago metric\r\nELSEIF [kpi_id]='K0005' then if [kpi_metric_value]>[kpi_target_max] then 'green'\r\n                                ELSEIF [kpi_metric_value]<[kpi_target_max] and [kpi_target_max]<[kpi_target_min]\r\n                                    then 'red'\r\n                                else 'yellow'\r\n                                end\r\n\r\nELSEIF [kpi_id]='K0026' //[Kpi Title]='Capital Expenditures' \r\n    then if [kpi_metric_value]>= [Calculation_329044261814546433] and [kpi_metric_value]<= [Capital Expenditures Green Min (copy)_329044261815382018] then 'green' \r\n    ELSEIF [kpi_metric_value]<[CapExp Green Max (copy)_329044261819965444] or [kpi_metric_value]>[CapExp Red Less Than (copy)_329044261820370949] then 'red'\r\n    ELSE 'yellow'\r\n    END\r\nELSEIF [kpi_id]='K0025' //[Kpi Title]='Net Contribution'\r\n    then if [Kpi Metric Value (copy)_246572097899376641]>=[kpi_target_max] and [Kpi Metric Value (copy)_246572097899376641]<= [CapExp Green Max (copy)_1016969106670551041] then 'green'\r\n    ELSEIF [Kpi Metric Value (copy)_246572097899376641]<[kpi_target_min] then 'red'\r\n    ELSE 'yellow'\r\n    end\r\nELSEIF [Backwards Color Group]='KPIBC' //KPI_ID= 21 headcount plan,22 time to fill roles,29 churn\r\n    then  IF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end \r\n        <= [kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\n    ELSEIF  \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] end\r\n        <=[kpi_target_max] then 'green'\r\n    ELSEIF \r\n        case [kpi_id] when 'K0029' then [kpi metric value Formulus (copy)_614459937381052420] \r\n        else [kpi_metric_value] END\r\n        <[kpi_target_min] then 'yellow'\r\n    ELSE 'red' END\r\n//Below is \"normal\" scenario:\r\nELSEIF //case stmts use columns that take care of rounding so comparison to targets will be accurate\r\n    case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] end\r\n    >=[kpi_target_outstanding] and not isnull([kpi_target_outstanding]) then 'dark green'\r\nELSEIF  case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690] \r\n    ELSE [kpi_metric_value] END\r\n    >=[kpi_target_max] then 'green'\r\nELSEIF case [kpi_id] when 'K0001' then [Calculation_614459937039974400] when 'K0003' then [kpi metric value SF (copy)_614459937380655107] when 'K0024' then [Kpi Metric Value NetContr (copy)_246572098170482690]\r\n    else [kpi_metric_value] END\r\n    >[kpi_target_min] then 'yellow'\r\nelse 'red' END"
          }
        },
        "Kpi Metric Value NetContr": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value NetContr",
          "datatype": "real",
          "name": "[Kpi Metric Value (copy)_246572097899376641]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Kpi Metric Value Revenue": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value Revenue",
          "datatype": "real",
          "name": "[Kpi Metric Value NetContr (copy)_246572098170482690]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "//needed b/c metric is in diff format than targets\r\nround([kpi_metric_value]/1000000,1)"
          }
        },
        "Update Status Text": {
          "py/object": "models.Column.Column",
          "caption": "Update Status Text",
          "datatype": "string",
          "name": "[Update Status Text (copy)_5305240406591078401]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if //update dt is less than the reporting month +1 \r\n[update_date]<\r\ndateadd('month',1,[Calculation_830632679161544704])\r\nthen '* not updated'\r\nelse ''\r\nEND"
          }
        },
        "Calculation": {
          "py/object": "models.Column.Column",
          "caption": "Calculation",
          "datatype": "string",
          "name": "[calculation]",
          "role": "dimension",
          "type": "nominal"
        },
        "diff_arrow": {
          "py/object": "models.Column.Column",
          "caption": "diff_arrow",
          "datatype": "string",
          "name": "[diff_arrow (copy)_1230327149234380805]",
          "role": "dimension",
          "type": "nominal",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "if [Calculation_1352205812740988931]>0 then '\u25b2'\r\nELSEIF [Calculation_1352205812740988931]<0 then '\u25bc'\r\nelse '\u25ba'\r\nEND"
          }
        },
        "kpi metric value Churn": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Churn",
          "datatype": "real",
          "name": "[kpi metric value Formulus (copy)_614459937381052420]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],1)"
          }
        },
        "kpi metric value Formulus": {
          "py/object": "models.Column.Column",
          "caption": "kpi metric value Formulus",
          "datatype": "real",
          "name": "[kpi metric value SF (copy)_614459937380655107]",
          "role": "measure",
          "type": "quantitative",
          "calculation": {
            "py/object": "models.Calculation.Calculation",
            "formula": "round([kpi_metric_value],0)"
          }
        },
        "Kpi Definition": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Definition",
          "datatype": "string",
          "name": "[kpi_definition]",
          "role": "dimension",
          "type": "nominal"
        },
        "Kpi Effective Date": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Effective Date",
          "datatype": "date",
          "default_format": "*mm/dd/yyyy",
          "name": "[kpi_effective_date]",
          "role": "dimension",
          "type": "ordinal"
        },
        "[kpi_id]": {
          "py/object": "models.Column.Column",
          "datatype": "string",
          "name": "[kpi_id]",
          "role": "dimension",
          "type": "nominal"
        },
        "[kpi_metric_value (Custom SQL Query)]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value (Custom SQL Query)]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Metric Value": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Metric Value",
          "datatype": "real",
          "name": "[kpi_metric_value]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_metric_value_lm]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_metric_value_lm]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Max": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Max",
          "datatype": "real",
          "name": "[kpi_target_max]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Target Min": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Target Min",
          "datatype": "real",
          "name": "[kpi_target_min]",
          "role": "measure",
          "type": "quantitative"
        },
        "[kpi_target_outstanding]": {
          "py/object": "models.Column.Column",
          "datatype": "real",
          "name": "[kpi_target_outstanding]",
          "role": "measure",
          "type": "quantitative"
        },
        "Kpi Title": {
          "py/object": "models.Column.Column",
          "caption": "Kpi Title",
          "datatype": "string",
          "name": "[kpi_title]",
          "role": "dimension",
          "type": "nominal"
        },
        "Metric Effective Date Key": {
          "py/object": "models.Column.Column",
          "caption": "Metric Effective Date Key",
          "datatype": "integer",
          "name": "[metric_effective_date_key]",
          "role": "dimension",
          "type": "ordinal"
        },
        "Strategy Name": {
          "py/object": "models.Column.Column",
          "caption": "Strategy Name",
          "datatype": "string",
          "name": "[strategy_name]",
          "role": "dimension",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.Column.Column",
          "datatype": "datetime",
          "default_format": "*mm/dd/yyyy",
          "name": "[update_date]",
          "role": "dimension",
          "type": "ordinal"
        }
      },
      "column_instances": {
        "[Calculation_830632679161544704]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_830632679161544704]",
          "derivation": "Attribute",
          "name": "[attr:Calculation_830632679161544704:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[calculation]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[calculation]",
          "derivation": "Attribute",
          "name": "[attr:calculation:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[diff_arrow (copy)_1230327149234380805]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[diff_arrow (copy)_1230327149234380805]",
          "derivation": "Attribute",
          "name": "[attr:diff_arrow (copy)_1230327149234380805:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_definition]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_definition]",
          "derivation": "Attribute",
          "name": "[attr:kpi_definition:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_effective_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_effective_date]",
          "derivation": "Attribute",
          "name": "[attr:kpi_effective_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[strategy_name]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[strategy_name]",
          "derivation": "Attribute",
          "name": "[attr:strategy_name:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[update_date]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[update_date]",
          "derivation": "Attribute",
          "name": "[attr:update_date:ok]",
          "pivot": "key",
          "type": "ordinal"
        },
        "[Color with Outstanding (copy)_614459937384169477]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Color with Outstanding (copy)_614459937384169477]",
          "derivation": "None",
          "name": "[none:Color with Outstanding (copy)_614459937384169477:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Update Status Text (copy)_5305240406591078401]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Update Status Text (copy)_5305240406591078401]",
          "derivation": "None",
          "name": "[none:Update Status Text (copy)_5305240406591078401:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_id]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_id]",
          "derivation": "None",
          "name": "[none:kpi_id:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[kpi_title]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_title]",
          "derivation": "None",
          "name": "[none:kpi_title:nk]",
          "pivot": "key",
          "type": "nominal"
        },
        "[Calculation_1352205812740988931]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[Calculation_1352205812740988931]",
          "derivation": "Sum",
          "name": "[sum:Calculation_1352205812740988931:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_metric_value]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_metric_value]",
          "derivation": "Sum",
          "name": "[sum:kpi_metric_value:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_max]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_max]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_max:qk]",
          "pivot": "key",
          "type": "quantitative"
        },
        "[kpi_target_min]": {
          "py/object": "models.ColumnInstance.ColumnInstance",
          "column": "[kpi_target_min]",
          "derivation": "Sum",
          "name": "[sum:kpi_target_min:qk]",
          "pivot": "key",
          "type": "quantitative"
        }
      },
      "filters": [
        {
          "py/object": "models.Filter.Filter",
          "column": "[federated.1w57z7b0xcsy1l1750ijj1twkqbp].[none:kpi_id:nk]",
          "group_filters": [
            {
              "py/object": "models.GroupFilter.GroupFilter",
              "function": "member",
              "level": "[none:kpi_id:nk]",
              "member": "\"K0005\"",
              "ui_domain": "relevant",
              "ui_enumeration": "inclusive",
              "ui_marker": "enumerate"
            }
          ]
        }
      ]
    }
  }
}
